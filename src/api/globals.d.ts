/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition - version v0
 *
 *
 *
 * OpenAPI version: 3.0.1
 *
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
import type { Alova, AlovaMethodCreateConfig, AlovaGenerics, Method } from 'alova';
import type { $$userConfigMap, alovaInstance } from '.';
import type apiDefinitions from './apiDefinitions';

type CollapsedAlova = typeof alovaInstance;
type UserMethodConfigMap = typeof $$userConfigMap;

type Alova2MethodConfig<Responded> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Omit<
        AlovaMethodCreateConfig<
          AlovaGenerics<Responded, any, RequestConfig, Response, ResponseHeader, L1Cache, L2Cache, SE>,
          any,
          Responded
        >,
        'params'
      >
    : never;

// Extract the return type of transform function that define in $$userConfigMap, if it not exists, use the default type.
type ExtractUserDefinedTransformed<
  DefinitionKey extends keyof typeof apiDefinitions,
  Default
> = DefinitionKey extends keyof UserMethodConfigMap
  ? UserMethodConfigMap[DefinitionKey]['transform'] extends (...args: any[]) => any
    ? Awaited<ReturnType<UserMethodConfigMap[DefinitionKey]['transform']>>
    : Default
  : Default;
type Alova2Method<
  Responded,
  DefinitionKey extends keyof typeof apiDefinitions,
  CurrentConfig extends Alova2MethodConfig<any>
> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Method<
        AlovaGenerics<
          CurrentConfig extends undefined
            ? ExtractUserDefinedTransformed<DefinitionKey, Responded>
            : CurrentConfig['transform'] extends (...args: any[]) => any
              ? Awaited<ReturnType<CurrentConfig['transform']>>
              : ExtractUserDefinedTransformed<DefinitionKey, Responded>,
          any,
          RequestConfig,
          Response,
          ResponseHeader,
          L1Cache,
          L2Cache,
          SE
        >
      >
    : never;

export interface TagTypeVo {
  /**
   * 乐观锁
   * ---
   */
  version?: number;
  /**
   * ID
   * ---
   */
  id?: number;
  /**
   * 创建人
   * ---
   */
  creatorId?: number;
  /**
   * 创建时间
   * ---
   */
  createTime?: string;
  /**
   * 更新人
   * ---
   */
  updaterId?: number;
  /**
   * 更新时间
   * ---
   */
  updateTime?: string;
  /**
   * 分类名称
   * ---
   */
  name?: string;
  /**
   * 父级分类ID（-1为根分类）
   * ---
   */
  parentId?: number;
  /**
   * 是否为末端类型
   * ---
   */
  isFinal?: boolean;
}
export interface RouteVo {
  /**
   * 乐观锁
   * ---
   */
  version?: number;
  /**
   * ID
   * ---
   */
  id?: number;
  /**
   * 创建人
   * ---
   */
  creatorId?: number;
  /**
   * 创建时间
   * ---
   */
  createTime?: string;
  /**
   * 更新人
   * ---
   */
  updaterId?: number;
  /**
   * 更新时间
   * ---
   */
  updateTime?: string;
  /**
   * 路线名称
   * ---
   */
  name?: string;
  /**
   * 路线描述
   * ---
   */
  content?: string;
  /**
   * 点位顺序数组
   * ---
   */
  markerList?: object[];
  /**
   * 显隐等级
   * ---
   */
  hiddenFlag?: number;
  /**
   * 视频地址
   * ---
   */
  video?: string;
  /**
   * 额外信息
   * ---
   */
  extra?: Record<string, object>;
  /**
   * 创建人昵称
   * ---
   */
  creatorNickname?: string;
}
export interface ResourceUploadVo {
  /**
   * 文件路径
   * ---
   */
  filePath?: string;
  /**
   * 文件地址
   * ---
   */
  fileUrl?: string;
}
export interface MarkerPunctuateVo {
  /**
   * 乐观锁
   * ---
   */
  version?: number;
  /**
   * ID
   * ---
   */
  id?: number;
  /**
   * 创建人
   * ---
   */
  creatorId?: number;
  /**
   * 创建时间
   * ---
   */
  createTime?: string;
  /**
   * 更新人
   * ---
   */
  updaterId?: number;
  /**
   * 更新时间
   * ---
   */
  updateTime?: string;
  /**
   * 点位提交ID
   * ---
   */
  punctuateId?: number;
  /**
   * 原有点位ID
   * ---
   */
  originalMarkerId?: number;
  /**
   * 点位名称
   * ---
   */
  markerTitle?: string;
  /**
   * 点位物品列表
   * ---
   */
  itemList?: string;
  /**
   * 点位坐标
   * ---
   */
  position?: string;
  /**
   * 点位说明
   * ---
   */
  content?: string;
  /**
   * 额外特殊字段
   * ---
   */
  extra?: Record<string, object>;
  /**
   * 点位图片
   * ---
   */
  picture?: string;
  /**
   * 点位初始标记者
   * ---
   */
  markerCreatorId?: number;
  /**
   * 点位图片上传者
   * ---
   */
  pictureCreatorId?: number;
  /**
   * 点位视频
   * ---
   */
  videoPath?: string;
  /**
   * 隐藏标志
   * ---
   */
  hiddenFlag?: number;
  /**
   * 点位提交者ID
   * ---
   */
  author?: number;
  /**
   * 状态;0:暂存 1:审核中 2:不通过
   * ---
   */
  status?: number;
  /**
   * 审核备注
   * ---
   */
  auditRemark?: string;
  /**
   * 操作类型;1: 新增 2: 修改 3: 删除
   * ---
   */
  methodType?: number;
  /**
   * 点位刷新时间
   * ---
   */
  refreshTime?: number;
}
export interface NoticeVo {
  /**
   * 乐观锁
   * ---
   */
  version?: number;
  /**
   * ID
   * ---
   */
  id?: number;
  /**
   * 创建人
   * ---
   */
  creatorId?: number;
  /**
   * 创建时间
   * ---
   */
  createTime?: string;
  /**
   * 更新人
   * ---
   */
  updaterId?: number;
  /**
   * 更新时间
   * ---
   */
  updateTime?: string;
  /**
   * 频道
   * ---
   */
  channel?: string[];
  /**
   * 标题
   * ---
   */
  title?: string;
  /**
   * 内容
   * ---
   */
  content?: string;
  /**
   * 排序
   * ---
   */
  sortIndex?: number;
  /**
   * 有效期开始时间
   * ---
   */
  validTimeStart?: string;
  /**
   * 有效期结束时间
   * ---
   */
  validTimeEnd?: string;
}
export interface MarkerItemLinkVo {
  /**
   * 物品ID
   * ---
   */
  itemId?: number;
  /**
   * 物品于该点位数量
   * ---
   */
  count?: number;
  /**
   * 图标标签
   * ---
   */
  iconTag?: string;
}
export interface MarkerVo {
  /**
   * 乐观锁
   * ---
   */
  version?: number;
  /**
   * ID
   * ---
   */
  id?: number;
  /**
   * 创建人
   * ---
   */
  creatorId?: number;
  /**
   * 创建时间
   * ---
   */
  createTime?: string;
  /**
   * 更新人
   * ---
   */
  updaterId?: number;
  /**
   * 更新时间
   * ---
   */
  updateTime?: string;
  /**
   * 点位签戳（用于兼容旧点位ID）
   * ---
   */
  markerStamp?: string;
  /**
   * 点位名称
   * ---
   */
  markerTitle?: string;
  /**
   * 点位坐标
   * ---
   */
  position?: string;
  /**
   * 点位物品列表
   * ---
   */
  itemList?: MarkerItemLinkVo[];
  /**
   * 点位说明
   * ---
   */
  content?: string;
  /**
   * 点位图片
   * ---
   */
  picture?: string;
  /**
   * 点位初始标记者
   * ---
   */
  markerCreatorId?: number;
  /**
   * 点位图片上传者
   * ---
   */
  pictureCreatorId?: number;
  /**
   * 点位视频
   * ---
   */
  videoPath?: string;
  /**
   * 点位刷新时间;单位:毫秒
   * ---
   */
  refreshTime?: number;
  /**
   * 隐藏标志
   * ---
   */
  hiddenFlag?: number;
  /**
   * 额外特殊字段
   * ---
   */
  extra?: Record<string, object>;
  /**
   * 点位关联组ID
   * ---
   */
  linkageId?: string;
}
export interface ItemTypeVo {
  /**
   * 乐观锁
   * ---
   */
  version?: number;
  /**
   * ID
   * ---
   */
  id?: number;
  /**
   * 创建人
   * ---
   */
  creatorId?: number;
  /**
   * 创建时间
   * ---
   */
  createTime?: string;
  /**
   * 更新人
   * ---
   */
  updaterId?: number;
  /**
   * 更新时间
   * ---
   */
  updateTime?: string;
  /**
   * 图标标签
   * ---
   */
  iconTag?: string;
  /**
   * 类型名
   * ---
   */
  name?: string;
  /**
   * 类型补充说明
   * ---
   */
  content?: string;
  /**
   * 父级类型ID（无父级则为-1）
   * ---
   */
  parentId?: number;
  /**
   * 是否为末端类型
   * ---
   */
  isFinal?: boolean;
  /**
   * 隐藏标记
   * ---
   */
  hiddenFlag?: number;
  /**
   * 排序
   * ---
   */
  sortIndex?: number;
}
export interface ItemVo {
  /**
   * 乐观锁
   * ---
   */
  version?: number;
  /**
   * ID
   * ---
   */
  id?: number;
  /**
   * 创建人
   * ---
   */
  creatorId?: number;
  /**
   * 创建时间
   * ---
   */
  createTime?: string;
  /**
   * 更新人
   * ---
   */
  updaterId?: number;
  /**
   * 更新时间
   * ---
   */
  updateTime?: string;
  /**
   * 物品名称
   * ---
   */
  name?: string;
  /**
   * 地区ID（须确保是末端地区）
   * ---
   */
  areaId?: number;
  /**
   * 默认刷新时间;单位:毫秒
   * ---
   */
  defaultRefreshTime?: number;
  /**
   * 默认描述模板;用于提交新物品点位时的描述模板
   * ---
   */
  defaultContent?: string;
  /**
   * 默认数量
   * ---
   */
  defaultCount?: number;
  /**
   * 图标标签
   * ---
   */
  iconTag?: string;
  /**
   * 图标样式类型
   * ---
   */
  iconStyleType?: number;
  /**
   * 隐藏标志
   * ---
   */
  hiddenFlag?: number;
  /**
   * 物品排序
   * ---
   */
  sortIndex?: number;
  /**
   * 特殊物品标记;二进制表示；低位第一位：前台是否显示
   * ---
   */
  specialFlag?: number;
  /**
   * 物品类型ID列表
   * ---
   */
  typeIdList?: number[];
  /**
   * 查询条件下物品总数
   * ---
   */
  count?: number;
  /**
   * 物品总数区分
   * ---
   */
  countSplit?: Record<string, number>;
}
export interface IconTypeVo {
  /**
   * 乐观锁
   * ---
   */
  version?: number;
  /**
   * ID
   * ---
   */
  id?: number;
  /**
   * 创建人
   * ---
   */
  creatorId?: number;
  /**
   * 创建时间
   * ---
   */
  createTime?: string;
  /**
   * 更新人
   * ---
   */
  updaterId?: number;
  /**
   * 更新时间
   * ---
   */
  updateTime?: string;
  /**
   * 分类名
   * ---
   */
  name?: string;
  /**
   * 父级分类ID（-1为根分类）
   * ---
   */
  parentId?: number;
  /**
   * 是否为末端类型
   * ---
   */
  isFinal?: boolean;
}
export interface IconVo {
  /**
   * 乐观锁
   * ---
   */
  version?: number;
  /**
   * ID
   * ---
   */
  id?: number;
  /**
   * 创建人
   * ---
   */
  creatorId?: number;
  /**
   * 创建时间
   * ---
   */
  createTime?: string;
  /**
   * 更新人
   * ---
   */
  updaterId?: number;
  /**
   * 更新时间
   * ---
   */
  updateTime?: string;
  /**
   * 图标名称
   * ---
   */
  name?: string;
  /**
   * 图标类型ID列表
   * ---
   */
  typeIdList?: number[];
  /**
   * 图标url
   * ---
   */
  url?: string;
}
export interface AreaVo {
  /**
   * 乐观锁
   * ---
   */
  version?: number;
  /**
   * ID
   * ---
   */
  id?: number;
  /**
   * 创建人
   * ---
   */
  creatorId?: number;
  /**
   * 创建时间
   * ---
   */
  createTime?: string;
  /**
   * 更新人
   * ---
   */
  updaterId?: number;
  /**
   * 更新时间
   * ---
   */
  updateTime?: string;
  /**
   * 地区名称
   * ---
   */
  name?: string;
  /**
   * 地区代码
   * ---
   */
  code?: string;
  /**
   * 地区说明
   * ---
   */
  content?: string;
  /**
   * 图标标签
   * ---
   */
  iconTag?: string;
  /**
   * 父级地区ID（无父级则为-1）
   * ---
   */
  parentId?: number;
  /**
   * 是否为末端地区
   * ---
   */
  isFinal?: boolean;
  /**
   * 权限屏蔽标记
   * ---
   */
  hiddenFlag?: number;
  /**
   * 额外标记;低位第一位：前台是否显示
   * ---
   */
  specialFlag?: number;
  /**
   * 排序
   * ---
   */
  sortIndex?: number;
}
export interface SysUserUpdateVo {
  userId?: number;
  nickname?: string;
  qq?: string;
  phone?: string;
  logo?: string;
  roleId?: number;
  remark?: string;
  accessPolicy?: string[];
}
export interface SysUserPasswordUpdateVo {
  userId?: number;
  password?: string;
  oldPassword?: string;
}
export interface SysUserRegisterVo {
  username?: string;
  password?: string;
}
export interface SysUserSearchVo {
  /**
   * 当前页，从1开始
   * ---
   */
  current?: number;
  /**
   * 每页大小，默认为10
   * ---
   */
  size?: number;
  /**
   * 用户名
   * ---
   */
  username?: string;
  /**
   * 昵称
   * ---
   */
  nickname?: string;
  /**
   * 角色ID
   * ---
   */
  roleIds?: string[];
  /**
   * 排序条件
   * ---
   */
  sort?: string[];
}
export interface SysUserInvitationVo {
  /**
   * 乐观锁
   * ---
   */
  version?: number;
  /**
   * ID
   * ---
   */
  id?: number;
  /**
   * 创建人
   * ---
   */
  creatorId?: number;
  /**
   * 创建时间
   * ---
   */
  createTime?: string;
  /**
   * 更新人
   * ---
   */
  updaterId?: number;
  /**
   * 更新时间
   * ---
   */
  updateTime?: string;
  /**
   * 邀请码
   * ---
   */
  code?: string;
  /**
   * 用户名
   * ---
   */
  username?: string;
  /**
   * 角色ID
   * ---
   */
  roleId?: number;
  /**
   * 备注
   * ---
   */
  remark?: string;
  /**
   * 权限策略
   * ---
   */
  accessPolicy?: string[];
}
export interface SysUserInvitationSearchVo {
  /**
   * 当前页，从1开始
   * ---
   */
  current?: number;
  /**
   * 每页大小，默认为10
   * ---
   */
  size?: number;
  /**
   * 邀请码
   * ---
   */
  code?: string;
  /**
   * 用户名
   * ---
   */
  username?: string;
  /**
   * 排序条件
   * ---
   */
  sort?: string[];
}
export interface SysUserInvitationSmallVo {
  /**
   * 邀请码
   * ---
   */
  code?: string;
  /**
   * 用户名
   * ---
   */
  username?: string;
}
export interface SysUserInvitationConsumeVo {
  /**
   * 邀请码
   * ---
   */
  code?: string;
  /**
   * 用户名
   * ---
   */
  username?: string;
  /**
   * 密码
   * ---
   */
  password?: string;
  /**
   * 昵称
   * ---
   */
  nickname?: string;
}
export interface Region {
  /**
   * 国家
   * ---
   */
  country?: string;
  /**
   * 地区
   * ---
   */
  region?: string;
  /**
   * 省/州
   * ---
   */
  province?: string;
  /**
   * 城市
   * ---
   */
  city?: string;
  /**
   * 网络运营商
   * ---
   */
  isp?: string;
  fullRegion?: string;
  /**
   * 是否是未知地区
   * ---
   */
  isUnknown?: boolean;
}
export interface SysUserDeviceVo {
  /**
   * 乐观锁
   * ---
   */
  version?: number;
  /**
   * ID
   * ---
   */
  id?: number;
  /**
   * 创建人
   * ---
   */
  creatorId?: number;
  /**
   * 创建时间
   * ---
   */
  createTime?: string;
  /**
   * 更新人
   * ---
   */
  updaterId?: number;
  /**
   * 更新时间
   * ---
   */
  updateTime?: string;
  /**
   * 用户ID
   * ---
   */
  userId?: number;
  /**
   * 设备编码
   * ---
   */
  deviceId?: string;
  /**
   * IPv4
   * ---
   */
  ipv4?: string;
  /**
   * IP地区信息
   * ---
   */
  ipRegion?: Region;
  /**
   * 设备状态
   * ---
   */
  status?: '0' | '1' | '2';
  /**
   * 上次登录时间
   * ---
   */
  lastLoginTime?: string;
}
export interface SysUserDeviceSearchVo {
  /**
   * 当前页，从1开始
   * ---
   */
  current?: number;
  /**
   * 每页大小，默认为10
   * ---
   */
  size?: number;
  /**
   * 用户ID
   * ---
   */
  userId?: number;
  /**
   * IPv4
   * ---
   */
  ipv4?: string;
  /**
   * 设备ID
   * ---
   */
  deviceId?: string;
  /**
   * 设备状态
   * ---
   */
  status?: number;
  /**
   * 排序条件
   * ---
   */
  sort?: string[];
}
export interface SysActionLogSearchVo {
  /**
   * 当前页，从0开始
   * ---
   */
  current?: number;
  /**
   * 每页大小，默认为10
   * ---
   */
  size?: number;
  /**
   * 用户ID
   * ---
   */
  userId?: number;
  /**
   * IPv4
   * ---
   */
  ipv4?: string;
  /**
   * 设备ID
   * ---
   */
  deviceId?: string;
  /**
   * 操作名
   * ---
   */
  action?: string;
  /**
   * 是否是错误
   * ---
   */
  isError?: boolean;
  /**
   * 排序条件
   * ---
   */
  sort?: string[];
}
export interface PageAndTypeSearchVo {
  /**
   * 当前页，从1开始
   * ---
   */
  current?: number;
  /**
   * 每页大小，默认为10
   * ---
   */
  size?: number;
  /**
   * 父级类型ID列表
   * ---
   */
  typeIdList?: number[];
}
export interface TagVo {
  /**
   * 乐观锁
   * ---
   */
  version?: number;
  /**
   * 创建人
   * ---
   */
  creatorId?: number;
  /**
   * 创建时间
   * ---
   */
  createTime?: string;
  /**
   * 更新人
   * ---
   */
  updaterId?: number;
  /**
   * 更新时间
   * ---
   */
  updateTime?: string;
  /**
   * 标签名
   * ---
   */
  tag?: string;
  /**
   * 标签类型ID列表
   * ---
   */
  typeIdList?: number[];
  /**
   * 图标ID
   * ---
   */
  iconId?: number;
  /**
   * 图标url
   * ---
   */
  url?: string;
}
export interface TagSearchVo {
  /**
   * 标签名列表
   * ---
   */
  tagList?: string[];
  /**
   * 图标标签分类列表
   * ---
   */
  typeIdList?: number[];
  /**
   * 当前页，从1开始
   * ---
   */
  current?: number;
  /**
   * 每页大小，默认为10
   * ---
   */
  size?: number;
}
export interface ScoreParamsVo {
  /**
   * 统计范围
   * ---
   */
  scope?: string;
  /**
   * 开始时间
   * ---
   */
  startTime?: string;
  /**
   * 结束时间
   * ---
   */
  endTime?: string;
  /**
   * 统计颗粒度
   * ---
   */
  span?: 'DAY';
  generatorId?: number;
}
export interface RouteSearchVo {
  /**
   * 路线名称模糊搜索字段
   * ---
   */
  namePart?: string;
  /**
   * 创建人昵称模糊搜索字段，此字段不能与创建人id字段共存
   * ---
   */
  creatorNicknamePart?: string;
  /**
   * 创建人id，此字段不能与昵称模糊搜索字段共存
   * ---
   */
  creatorId?: string;
  /**
   * 当前页，从1开始
   * ---
   */
  current?: number;
  /**
   * 每页大小，默认为10
   * ---
   */
  size?: number;
}
export interface PageSearchVo {
  /**
   * 当前页，从1开始
   * ---
   */
  current?: number;
  /**
   * 每页大小，默认为10
   * ---
   */
  size?: number;
}
export interface PunctuateSearchVo {
  /**
   * 乐观锁：修改次数
   * ---
   */
  version?: number;
  /**
   * 地区ID列表
   * ---
   */
  areaIdList?: number[];
  /**
   * 物品ID列表
   * ---
   */
  itemIdList?: number[];
  /**
   * 类型ID列表
   * ---
   */
  typeIdList?: number[];
  /**
   * 提交者ID列表
   * ---
   */
  authorList?: number[];
}
export interface NoticeSearchVo {
  /**
   * 频道
   * ---
   */
  channels?: string[];
  /**
   * 标题
   * ---
   */
  title?: string;
  /**
   * 获取有效数据
   * ---
   */
  getValid?: boolean;
  /**
   * 数据转换器
   * ---
   */
  transformer?: string;
  /**
   * 排序条件
   * ---
   */
  sort?: string[];
  /**
   * 当前页，从1开始
   * ---
   */
  current?: number;
  /**
   * 每页大小，默认为10
   * ---
   */
  size?: number;
}
export interface PathEdgeVo {
  /**
   * 起始点位ID
   * ---
   * 输出时会转换为 X1 & Y1
   */
  id1?: number;
  /**
   * 起始位置X坐标
   * ---
   */
  x1?: number;
  /**
   * 起始位置Y坐标
   * ---
   */
  y1?: number;
  /**
   * 起始曲线句柄X坐标
   * ---
   * 起始位置的三次贝塞尔曲线句柄X坐标
   */
  handleX1?: number;
  /**
   * 起始曲线句柄Y坐标
   * ---
   * 起始位置的三次贝塞尔曲线句柄Y坐标
   */
  handleY1?: number;
  /**
   * 起点箭头形状
   * ---
   */
  arrowType1?: 'NONE' | 'ARROW' | 'CIRCLE' | 'DOT';
  /**
   * 终止点位ID
   * ---
   * 输出时会转换为 X2 & Y2
   */
  id2?: number;
  /**
   * 终止位置X坐标
   * ---
   */
  x2?: number;
  /**
   * 终止位置Y坐标
   * ---
   */
  y2?: number;
  /**
   * 终止曲线句柄X坐标
   * ---
   * 终止位置的三次贝塞尔曲线句柄X坐标
   */
  handleX2?: number;
  /**
   * 终止曲线句柄Y坐标
   * ---
   * 终止位置的三次贝塞尔曲线句柄Y坐标
   */
  handleY2?: number;
  /**
   * 终点箭头形状
   * ---
   */
  arrowType2?: 'NONE' | 'ARROW' | 'CIRCLE' | 'DOT';
  /**
   * 线条样式
   * ---
   */
  lineType?: 'SOLID' | 'DASHED' | 'DOTTED';
}
export interface MarkerLinkageVo {
  /**
   * 乐观锁
   * ---
   */
  version?: number;
  /**
   * ID
   * ---
   */
  id?: number;
  /**
   * 更新人
   * ---
   */
  updaterId?: number;
  /**
   * 更新时间
   * ---
   */
  updateTime?: string;
  /**
   * 组ID
   * ---
   */
  groupId?: string;
  /**
   * 起始点点位ID;会根据是否反向与 to_id 交换
   * ---
   */
  fromId?: number;
  /**
   * 终止点点位ID;会根据是否反向与 from_id 交换
   * ---
   */
  toId?: number;
  /**
   * 关联操作类型
   * ---
   */
  linkAction?: string;
  /**
   * 是否反向
   * ---
   */
  linkReverse?: boolean;
  /**
   * 路线
   * ---
   */
  path?: PathEdgeVo[];
  /**
   * 额外数据
   * ---
   */
  extra?: Record<string, object>;
}
export interface MarkerLinkageSearchVo {
  groupIds?: string[];
}
export interface TweakConfigMetaVo {
  /**
   * 数据值
   * ---
   */
  value?: object;
  /**
   * 检查文本
   * ---
   */
  test?: string;
  /**
   * 替换为
   * ---
   */
  replace?: string;
  /**
   * 键值对映射
   * ---
   */
  map?: Record<string, object>;
  /**
   * 物品关联
   * ---
   */
  itemList?: MarkerItemLinkVo[];
}
export interface TweakConfigVo {
  /**
   * 需调整的点位属性
   * ---
   */
  prop?: string;
  /**
   * 调整方法类型
   * ---
   */
  type?: string;
  /**
   * 调整配置数据前端封装
   * ---
   * 此项根据调整方法类型使用不同的数据字段
   */
  meta?: TweakConfigMetaVo;
}
export interface TweakVo {
  /**
   * 点位ID
   * ---
   */
  markerIds?: number[];
  /**
   * 点位数据调整配置
   * ---
   */
  tweaks?: TweakConfigVo[];
}
export interface MarkerSearchVo {
  /**
   * 地区ID列表
   * ---
   */
  areaIdList?: number[];
  /**
   * 物品ID列表
   * ---
   */
  itemIdList?: number[];
  /**
   * 类型ID列表
   * ---
   */
  typeIdList?: number[];
}
export interface ItemSearchVo {
  /**
   * 末端物品类型ID列表
   * ---
   */
  typeIdList?: number[];
  /**
   * 末端地区ID列表
   * ---
   */
  areaIdList?: number[];
  /**
   * 物品名
   * ---
   */
  name?: string;
  /**
   * 当前页，从1开始
   * ---
   */
  current?: number;
  /**
   * 每页大小，默认为10
   * ---
   */
  size?: number;
  /**
   * 排序条件
   * ---
   */
  sort?: string[];
}
export interface IconSearchVo {
  /**
   * 乐观锁：修改次数
   * ---
   */
  version?: number;
  /**
   * 图标ID列表
   * ---
   */
  iconIdList?: number[];
  /**
   * 创建者ID
   * ---
   */
  creator?: number;
  /**
   * 图标分类列表
   * ---
   */
  typeIdList?: number[];
  /**
   * 图标名
   * ---
   */
  name?: string;
  /**
   * 当前页，从1开始
   * ---
   */
  current?: number;
  /**
   * 每页大小，默认为10
   * ---
   */
  size?: number;
}
export interface HistorySearchVo {
  /**
   * 当前页，从1开始
   * ---
   */
  current?: number;
  /**
   * 每页大小，默认为10
   * ---
   */
  size?: number;
  /**
   * 记录类型
   * ---
   */
  type?: number;
  /**
   * 类型ID(配合记录类型使用)
   * ---
   */
  id?: number[];
  /**
   * 操作数据类型
   * ---
   */
  editType?: '0' | '1' | '2' | '3' | '10';
  /**
   * 创建人ID
   * ---
   */
  creatorId?: number;
  /**
   * 创建时间开始时间
   * ---
   */
  createTimeStart?: string;
  /**
   * 创建时间结束时间
   * ---
   */
  createTimeEnd?: string;
  /**
   * 排序条件
   * ---
   */
  sort?: string[];
}
export interface AreaSearchVo {
  /**
   * 父级ID
   * ---
   */
  parentId?: number;
  /**
   * 是否遍历子地区
   * ---
   */
  isTraverse?: boolean;
  /**
   * 数据等级(hidden_flag范围)
   * ---
   */
  hiddenFlagList?: number[];
}
export interface LinkDeleteQueryVo {
  ids?: number[];
  groupIds?: string[];
}
export interface SysUserSmallVo {
  /**
   * 用户名
   * ---
   */
  username?: string;
  /**
   * 昵称
   * ---
   */
  nickname?: string;
  /**
   * QQ
   * ---
   */
  qq?: string;
  /**
   * 手机号
   * ---
   */
  phone?: string;
  /**
   * 头像链接
   * ---
   */
  logo?: string;
  /**
   * 备注
   * ---
   */
  remark?: string;
}
export interface RListItemTypeVo {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  data?: ItemTypeVo[];
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface RBoolean {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  data?: boolean;
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface SysRoleVo {
  /**
   * 角色ID
   * ---
   */
  id?: number;
  /**
   * 角色名
   * ---
   */
  name?: string;
  /**
   * 角色代码（英文大写）
   * ---
   */
  code?: string;
  /**
   * 角色层级（越大级别越高）
   * ---
   */
  sort?: number;
}
export interface RListSysRoleVo {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  data?: SysRoleVo[];
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface SysArchiveVo {
  /**
   * 存档时间
   * ---
   */
  time?: string;
  /**
   * 存档
   * ---
   */
  archive?: string;
  /**
   * 存档历史下标
   * ---
   */
  historyIndex?: number;
}
export interface SysArchiveSlotVo {
  version?: number;
  /**
   * 存档ID
   * ---
   */
  id?: number;
  /**
   * 存档名称
   * ---
   */
  name?: string;
  /**
   * 槽位顺序
   * ---
   */
  slotIndex?: number;
  /**
   * 创建时间
   * ---
   */
  createTime?: string;
  /**
   * 更新时间
   * ---
   */
  updateTime?: string;
  /**
   * 存档列表
   * ---
   */
  archive?: SysArchiveVo[];
}
export interface RListSysArchiveSlotVo {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  data?: SysArchiveSlotVo[];
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface BinaryMD5Vo {
  /**
   * md5
   * ---
   */
  md5?: string;
  /**
   * 时间戳
   * ---
   */
  time?: number;
}
export interface RBinaryMD5Vo {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  /**
   * 归档类MD5前端封装
   * ---
   * 归档类MD5前端封装
   */
  data?: BinaryMD5Vo;
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface RListBinaryMD5Vo {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  data?: BinaryMD5Vo[];
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface RLong {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  data?: number;
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface RResourceUploadVo {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  /**
   * 资源上传前端封装
   * ---
   * 资源上传前端封装
   */
  data?: ResourceUploadVo;
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface SysUserVo {
  /**
   * 乐观锁
   * ---
   */
  version?: number;
  /**
   * ID
   * ---
   */
  id?: number;
  /**
   * 更新人
   * ---
   */
  updaterId?: number;
  /**
   * 更新时间
   * ---
   */
  updateTime?: string;
  /**
   * 用户名
   * ---
   */
  username?: string;
  /**
   * 昵称
   * ---
   */
  nickname?: string;
  /**
   * QQ
   * ---
   */
  qq?: string;
  /**
   * 手机号
   * ---
   */
  phone?: string;
  /**
   * 头像链接
   * ---
   */
  logo?: string;
  /**
   * 角色ID
   * ---
   */
  roleId?: number;
  /**
   * 备注
   * ---
   */
  remark?: string;
  /**
   * access_policy
   * ---
   */
  accessPolicy?: string[];
}
export interface PageListVoSysUserVo {
  record?: SysUserVo[];
  total?: number;
  size?: number;
}
export interface RPageListVoSysUserVo {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  /**
   * 分页记录前端封装
   * ---
   * 分页记录前端封装
   */
  data?: PageListVoSysUserVo;
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface RSysUserInvitationSmallVo {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  /**
   * 用户邀请前端封装
   * ---
   * 用户邀请前端封装
   */
  data?: SysUserInvitationSmallVo;
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface PageListVoSysUserInvitationVo {
  record?: SysUserInvitationVo[];
  total?: number;
  size?: number;
}
export interface RPageListVoSysUserInvitationVo {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  /**
   * 分页记录前端封装
   * ---
   * 分页记录前端封装
   */
  data?: PageListVoSysUserInvitationVo;
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface SysUserInvitationConsumeResultVo {
  /**
   * 用户ID
   * ---
   */
  userId?: number;
  /**
   * 条件结果
   * ---
   */
  result?: 'EXISTING' | 'SUCCESS';
}
export interface RSysUserInvitationConsumeResultVo {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  /**
   * 用户邀请消费结果数据封装
   * ---
   * 用户邀请消费结果数据封装
   */
  data?: SysUserInvitationConsumeResultVo;
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface PageListVoSysUserDeviceVo {
  record?: SysUserDeviceVo[];
  total?: number;
  size?: number;
}
export interface RPageListVoSysUserDeviceVo {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  /**
   * 分页记录前端封装
   * ---
   * 分页记录前端封装
   */
  data?: PageListVoSysUserDeviceVo;
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface SysActionLogVo {
  /**
   * 乐观锁
   * ---
   */
  version?: number;
  /**
   * ID
   * ---
   */
  id?: number;
  /**
   * 创建人
   * ---
   */
  creatorId?: number;
  /**
   * 创建时间
   * ---
   */
  createTime?: string;
  /**
   * 更新人
   * ---
   */
  updaterId?: number;
  /**
   * 更新时间
   * ---
   */
  updateTime?: string;
  /**
   * 用户ID
   * ---
   */
  userId?: number;
  /**
   * IPv4
   * ---
   */
  ipv4?: string;
  /**
   * 设备编码
   * ---
   */
  deviceId?: string;
  /**
   * 操作名
   * ---
   */
  action?: string;
  /**
   * 是否是错误
   * ---
   */
  isError?: boolean;
  /**
   * 附加信息
   * ---
   */
  extraData?: Record<string, object>;
}
export interface PageListVoSysActionLogVo {
  record?: SysActionLogVo[];
  total?: number;
  size?: number;
}
export interface RPageListVoSysActionLogVo {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  /**
   * 分页记录前端封装
   * ---
   * 分页记录前端封装
   */
  data?: PageListVoSysActionLogVo;
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface PageListVoTagTypeVo {
  record?: TagTypeVo[];
  total?: number;
  size?: number;
}
export interface RPageListVoTagTypeVo {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  /**
   * 分页记录前端封装
   * ---
   * 分页记录前端封装
   */
  data?: PageListVoTagTypeVo;
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface RTagVo {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  /**
   * Tag前端封装
   * ---
   * 图标标签主表前端封装
   */
  data?: TagVo;
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface PageListVoTagVo {
  record?: TagVo[];
  total?: number;
  size?: number;
}
export interface RPageListVoTagVo {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  /**
   * 分页记录前端封装
   * ---
   * 分页记录前端封装
   */
  data?: PageListVoTagVo;
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface RObject {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  data?: object;
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface PageListVoRouteVo {
  record?: RouteVo[];
  total?: number;
  size?: number;
}
export interface RPageListVoRouteVo {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  /**
   * 分页记录前端封装
   * ---
   * 分页记录前端封装
   */
  data?: PageListVoRouteVo;
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface RListRouteVo {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  data?: RouteVo[];
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface PageListVoMarkerPunctuateVo {
  record?: MarkerPunctuateVo[];
  total?: number;
  size?: number;
}
export interface RPageListVoMarkerPunctuateVo {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  /**
   * 分页记录前端封装
   * ---
   * 分页记录前端封装
   */
  data?: PageListVoMarkerPunctuateVo;
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface RListMarkerPunctuateVo {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  data?: MarkerPunctuateVo[];
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface RListLong {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  data?: number[];
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface PageListVoNoticeVo {
  record?: NoticeVo[];
  total?: number;
  size?: number;
}
export interface RPageListVoNoticeVo {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  /**
   * 分页记录前端封装
   * ---
   * 分页记录前端封装
   */
  data?: PageListVoNoticeVo;
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface RString {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  data?: string;
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface RMapStringListMarkerLinkageVo {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  data?: Record<string, MarkerLinkageVo[]>;
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface LinkRefVo {
  /**
   * 点位ID
   * ---
   */
  markerId?: number;
  /**
   * 起始点位ID
   * ---
   */
  srcId?: number;
  /**
   * 结束点位ID
   * ---
   */
  tarId?: number;
  /**
   * 路线组引用ID
   * ---
   */
  pathRefId?: number;
}
export interface RelationVo {
  /**
   * 关联组类型
   * ---
   */
  type?: string;
  /**
   * 触发关联数据
   * ---
   */
  triggers?: LinkRefVo[];
  /**
   * 目标关联数据
   * ---
   */
  targets?: LinkRefVo[];
  /**
   * 分组关联数据
   * ---
   */
  group?: LinkRefVo[];
}
export interface GraphVo {
  /**
   * 点位关联关系
   * ---
   */
  relations?: Record<string, string[]>;
  /**
   * 点位关联关系引用映射
   * ---
   */
  relRefs?: Record<string, RelationVo>;
  /**
   * 路线组引用映射
   * ---
   */
  pathRefs?: Record<string, PathEdgeVo[]>;
}
export interface RMapStringGraphVo {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  data?: Record<string, GraphVo>;
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface RListMarkerVo {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  data?: MarkerVo[];
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface PageListVoMarkerVo {
  record?: MarkerVo[];
  total?: number;
  size?: number;
}
export interface RPageListVoMarkerVo {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  /**
   * 分页记录前端封装
   * ---
   * 分页记录前端封装
   */
  data?: PageListVoMarkerVo;
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface ItemAreaPublicVo {
  /**
   * 乐观锁
   * ---
   */
  version?: number;
  /**
   * ID
   * ---
   */
  id?: number;
  /**
   * 创建人
   * ---
   */
  creatorId?: number;
  /**
   * 创建时间
   * ---
   */
  createTime?: string;
  /**
   * 更新人
   * ---
   */
  updaterId?: number;
  /**
   * 更新时间
   * ---
   */
  updateTime?: string;
  /**
   * 物品ID
   * ---
   */
  itemId?: number;
  /**
   * 物品名称
   * ---
   */
  name?: string;
  /**
   * 地区ID（须确保是末端地区）
   * ---
   */
  areaId?: number;
  /**
   * 默认刷新时间;单位:毫秒
   * ---
   */
  defaultRefreshTime?: number;
  /**
   * 默认描述模板;用于提交新物品点位时的描述模板
   * ---
   */
  defaultContent?: string;
  /**
   * 默认数量
   * ---
   */
  defaultCount?: number;
  /**
   * 图标标签
   * ---
   */
  iconTag?: string;
  /**
   * 图标样式类型
   * ---
   */
  iconStyleType?: number;
  /**
   * 隐藏标志
   * ---
   */
  hiddenFlag?: number;
  /**
   * 物品排序
   * ---
   */
  sortIndex?: number;
  /**
   * 特殊物品标记;二进制表示；低位第一位：前台是否显示
   * ---
   */
  specialFlag?: number;
  /**
   * 物品类型ID列表
   * ---
   */
  typeIdList?: number[];
}
export interface PageListVoItemAreaPublicVo {
  record?: ItemAreaPublicVo[];
  total?: number;
  size?: number;
}
export interface RPageListVoItemAreaPublicVo {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  /**
   * 分页记录前端封装
   * ---
   * 分页记录前端封装
   */
  data?: PageListVoItemAreaPublicVo;
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface PageListVoItemVo {
  record?: ItemVo[];
  total?: number;
  size?: number;
}
export interface RPageListVoItemVo {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  /**
   * 分页记录前端封装
   * ---
   * 分页记录前端封装
   */
  data?: PageListVoItemVo;
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface RListItemVo {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  data?: ItemVo[];
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface PageListVoIconTypeVo {
  record?: IconTypeVo[];
  total?: number;
  size?: number;
}
export interface RPageListVoIconTypeVo {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  /**
   * 分页记录前端封装
   * ---
   * 分页记录前端封装
   */
  data?: PageListVoIconTypeVo;
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface RIconVo {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  /**
   * Icon前端封装
   * ---
   * 图标主表前端封装
   */
  data?: IconVo;
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface PageListVoIconVo {
  record?: IconVo[];
  total?: number;
  size?: number;
}
export interface RPageListVoIconVo {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  /**
   * 分页记录前端封装
   * ---
   * 分页记录前端封装
   */
  data?: PageListVoIconVo;
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface HistoryVo {
  /**
   * 乐观锁
   * ---
   */
  version?: number;
  /**
   * ID
   * ---
   */
  id?: number;
  /**
   * 创建人
   * ---
   */
  creatorId?: number;
  /**
   * 创建时间
   * ---
   */
  createTime?: string;
  /**
   * 更新人
   * ---
   */
  updaterId?: number;
  /**
   * 更新时间
   * ---
   */
  updateTime?: string;
  /**
   * 内容
   * ---
   */
  content?: string;
  /**
   * MD5
   * ---
   */
  md5?: string;
  /**
   * 操作数据类型;1地区; 2图标; 3物品; 4点位; 5标签
   * ---
   */
  type?: number;
  /**
   * IPv4
   * ---
   */
  ipv4?: string;
  /**
   * 修改类型
   * ---
   */
  editType?: '0' | '1' | '2' | '3' | '10';
  tid?: number;
}
export interface PageListVoHistoryVo {
  record?: HistoryVo[];
  total?: number;
  size?: number;
}
export interface RPageListVoHistoryVo {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  /**
   * 分页记录前端封装
   * ---
   * 分页记录前端封装
   */
  data?: PageListVoHistoryVo;
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface RAreaVo {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  /**
   * Area前端封装
   * ---
   * 地区主表前端封装
   */
  data?: AreaVo;
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface RListAreaVo {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  data?: AreaVo[];
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface RSysUserVo {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  /**
   * SysUser前端封装
   * ---
   * 系统用户表前端封装
   */
  data?: SysUserVo;
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface RSysArchiveVo {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  /**
   * 存档VO
   * ---
   * 存档VO
   */
  data?: SysArchiveVo;
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface RSysArchiveSlotVo {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  /**
   * 存档槽位VO
   * ---
   * 存档槽位VO
   */
  data?: SysArchiveSlotVo;
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface LinkDeleteVo {
  groups?: string[];
  markers?: number[];
}
export interface RLinkDeleteVo {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  data?: LinkDeleteVo;
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
export interface PageListVoItemTypeVo {
  record?: ItemTypeVo[];
  total?: number;
  size?: number;
}
export interface RPageListVoItemTypeVo {
  error?: boolean;
  errorStatus?: number;
  errorData?: object;
  message?: string;
  /**
   * 分页记录前端封装
   * ---
   * 分页记录前端封装
   */
  data?: PageListVoItemTypeVo;
  users?: Record<string, SysUserSmallVo>;
  time?: string;
}
declare global {
  interface Apis {
    archive: {
      /**
       * ---
       *
       * [PUT] 新建存档槽位并将存档存入
       *
       * **path:** /system/archive/{slot_index}/{name}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   slot_index: number
       *   name: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = string
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      createSlotAndSaveArchive<
        Config extends Alova2MethodConfig<RBoolean> & {
          pathParams: {
            slot_index: number;
            name: string;
          };
          data: string;
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'archive.createSlotAndSaveArchive', Config>;
      /**
       * ---
       *
       * [POST] 存档入指定槽位
       *
       * **path:** /system/archive/save/{slot_index}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   slot_index: number
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = string
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      saveArchive<
        Config extends Alova2MethodConfig<RBoolean> & {
          pathParams: {
            slot_index: number;
          };
          data: string;
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'archive.saveArchive', Config>;
      /**
       * ---
       *
       * [POST] 重命名指定槽位
       *
       * **path:** /system/archive/rename/{slot_index}/{new_name}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   slot_index: number
       *   new_name: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      renameSlot<
        Config extends Alova2MethodConfig<RBoolean> & {
          pathParams: {
            slot_index: number;
            new_name: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'archive.renameSlot', Config>;
      /**
       * ---
       *
       * [GET] 获取指定存档槽位的当前存档
       *
       * **path:** /system/archive/last/{slot_index}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   slot_index: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [title] 存档VO
       *   // 存档VO
       *   data?: {
       *     // [title] 存档时间
       *     time?: string
       *     // [title] 存档
       *     archive?: string
       *     // [title] 存档历史下标
       *     historyIndex?: number
       *   }
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      getLastArchive<
        Config extends Alova2MethodConfig<RSysArchiveVo> & {
          pathParams: {
            slot_index: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<RSysArchiveVo, 'archive.getLastArchive', Config>;
      /**
       * ---
       *
       * [GET] 获取指定槽位的所有历史存档
       *
       * **path:** /system/archive/history/{slot_index}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   slot_index: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [title] 存档槽位VO
       *   // 存档槽位VO
       *   data?: {
       *     version?: number
       *     // [title] 存档ID
       *     id?: number
       *     // [title] 存档名称
       *     name?: string
       *     // [title] 槽位顺序
       *     slotIndex?: number
       *     // [title] 创建时间
       *     createTime?: string
       *     // [title] 更新时间
       *     updateTime?: string
       *     // [title] 存档列表
       *     // [items] start
       *     // [title] 存档VO
       *     // 存档VO
       *     // [items] end
       *     archive?: Array<{
       *       // [title] 存档时间
       *       time?: string
       *       // [title] 存档
       *       archive?: string
       *       // [title] 存档历史下标
       *       historyIndex?: number
       *     }>
       *   }
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      getHistoryArchive<
        Config extends Alova2MethodConfig<RSysArchiveSlotVo> & {
          pathParams: {
            slot_index: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<RSysArchiveSlotVo, 'archive.getHistoryArchive', Config>;
      /**
       * ---
       *
       * [GET] 获取所有槽位的历史存档
       *
       * **path:** /system/archive/all_history
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [items] start
       *   // [title] 存档槽位VO
       *   // 存档槽位VO
       *   // [items] end
       *   data?: Array<{
       *     version?: number
       *     // [title] 存档ID
       *     id?: number
       *     // [title] 存档名称
       *     name?: string
       *     // [title] 槽位顺序
       *     slotIndex?: number
       *     // [title] 创建时间
       *     createTime?: string
       *     // [title] 更新时间
       *     updateTime?: string
       *     // [title] 存档列表
       *     // [items] start
       *     // [title] 存档VO
       *     // 存档VO
       *     // [items] end
       *     archive?: Array<{
       *       // [title] 存档时间
       *       time?: string
       *       // [title] 存档
       *       archive?: string
       *       // [title] 存档历史下标
       *       historyIndex?: number
       *     }>
       *   }>
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      getAllHistoryArchive<Config extends Alova2MethodConfig<RListSysArchiveSlotVo>>(
        config?: Config
      ): Alova2Method<RListSysArchiveSlotVo, 'archive.getAllHistoryArchive', Config>;
      /**
       * ---
       *
       * [DELETE] 删除存档槽位
       *
       * **path:** /system/archive/slot/{slot_index}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   slot_index: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      removeArchive<
        Config extends Alova2MethodConfig<RBoolean> & {
          pathParams: {
            slot_index: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'archive.removeArchive', Config>;
      /**
       * ---
       *
       * [DELETE] 删除最近一次存档（恢复为上次存档）
       *
       * **path:** /system/archive/restore/{slot_index}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   slot_index: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [title] 存档VO
       *   // 存档VO
       *   data?: {
       *     // [title] 存档时间
       *     time?: string
       *     // [title] 存档
       *     archive?: string
       *     // [title] 存档历史下标
       *     historyIndex?: number
       *   }
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      restoreArchive<
        Config extends Alova2MethodConfig<RSysArchiveVo> & {
          pathParams: {
            slot_index: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<RSysArchiveVo, 'archive.restoreArchive', Config>;
    };
    tag_type: {
      /**
       * ---
       *
       * [PUT] 新增分类
       *
       * **path:** /api/tag_type/add
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 乐观锁
       *   version?: number
       *   // [title] ID
       *   id?: number
       *   // [title] 创建人
       *   creatorId?: number
       *   // [title] 创建时间
       *   createTime?: string
       *   // [title] 更新人
       *   updaterId?: number
       *   // [title] 更新时间
       *   updateTime?: string
       *   // [title] 分类名称
       *   name?: string
       *   // [title] 父级分类ID（-1为根分类）
       *   parentId?: number
       *   // [title] 是否为末端类型
       *   isFinal?: boolean
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: number
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      addTagType<
        Config extends Alova2MethodConfig<RLong> & {
          data: TagTypeVo;
        }
      >(
        config: Config
      ): Alova2Method<RLong, 'tag_type.addTagType', Config>;
      /**
       * ---
       *
       * [POST] 修改分类
       *
       * **path:** /api/tag_type/update
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 乐观锁
       *   version?: number
       *   // [title] ID
       *   id?: number
       *   // [title] 创建人
       *   creatorId?: number
       *   // [title] 创建时间
       *   createTime?: string
       *   // [title] 更新人
       *   updaterId?: number
       *   // [title] 更新时间
       *   updateTime?: string
       *   // [title] 分类名称
       *   name?: string
       *   // [title] 父级分类ID（-1为根分类）
       *   parentId?: number
       *   // [title] 是否为末端类型
       *   isFinal?: boolean
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      updateTagType<
        Config extends Alova2MethodConfig<RBoolean> & {
          data: TagTypeVo;
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'tag_type.updateTagType', Config>;
      /**
       * ---
       *
       * [POST] 列出分类
       *
       * **path:** /api/tag_type/get/list
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 当前页，从1开始
       *   current?: number
       *   // [title] 每页大小，默认为10
       *   size?: number
       *   // [title] 父级类型ID列表
       *   // [items] start
       *   // [title] 父级类型ID列表
       *   // [items] end
       *   typeIdList?: number[]
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [title] 分页记录前端封装
       *   // 分页记录前端封装
       *   data?: {
       *     // [items] start
       *     // [title] TagType前端封装
       *     // 图标标签分类表前端封装
       *     // [items] end
       *     record?: Array<{
       *       // [title] 乐观锁
       *       version?: number
       *       // [title] ID
       *       id?: number
       *       // [title] 创建人
       *       creatorId?: number
       *       // [title] 创建时间
       *       createTime?: string
       *       // [title] 更新人
       *       updaterId?: number
       *       // [title] 更新时间
       *       updateTime?: string
       *       // [title] 分类名称
       *       name?: string
       *       // [title] 父级分类ID（-1为根分类）
       *       parentId?: number
       *       // [title] 是否为末端类型
       *       isFinal?: boolean
       *     }>
       *     total?: number
       *     size?: number
       *   }
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      listTagType<
        Config extends Alova2MethodConfig<RPageListVoTagTypeVo> & {
          data: PageAndTypeSearchVo;
        }
      >(
        config: Config
      ): Alova2Method<RPageListVoTagTypeVo, 'tag_type.listTagType', Config>;
      /**
       * ---
       *
       * [DELETE] 删除分类
       *
       * **path:** /api/tag_type/delete/{typeId}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   typeId: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      deleteTagType<
        Config extends Alova2MethodConfig<RBoolean> & {
          pathParams: {
            typeId: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'tag_type.deleteTagType', Config>;
    };
    tag: {
      /**
       * ---
       *
       * [PUT] 创建标签
       *
       * **path:** /api/tag/{tagName}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   tagName: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      createTag<
        Config extends Alova2MethodConfig<RBoolean> & {
          pathParams: {
            tagName: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'tag.createTag', Config>;
      /**
       * ---
       *
       * [DELETE] 删除标签
       *
       * **path:** /api/tag/{tagName}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   tagName: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      deleteTag<
        Config extends Alova2MethodConfig<RBoolean> & {
          pathParams: {
            tagName: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'tag.deleteTag', Config>;
      /**
       * ---
       *
       * [POST] 修改标签关联
       *
       * **path:** /api/tag/{tagName}/{iconId}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   tagName: string
       *   iconId: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      updateTag<
        Config extends Alova2MethodConfig<RBoolean> & {
          pathParams: {
            tagName: string;
            iconId: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'tag.updateTag', Config>;
      /**
       * ---
       *
       * [POST] 修改标签的分类信息
       *
       * **path:** /api/tag/updateType
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 乐观锁
       *   version?: number
       *   // [title] 创建人
       *   creatorId?: number
       *   // [title] 创建时间
       *   createTime?: string
       *   // [title] 更新人
       *   updaterId?: number
       *   // [title] 更新时间
       *   updateTime?: string
       *   // [title] 标签名
       *   tag?: string
       *   // [title] 标签类型ID列表
       *   // [items] start
       *   // [title] 标签类型ID列表
       *   // [items] end
       *   typeIdList?: number[]
       *   // [title] 图标ID
       *   iconId?: number
       *   // [title] 图标url
       *   url?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      updateTypeInTag<
        Config extends Alova2MethodConfig<RBoolean> & {
          data: TagVo;
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'tag.updateTypeInTag', Config>;
      /**
       * ---
       *
       * [POST] 获取单个标签信息
       *
       * **path:** /api/tag/get/single/{name}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   name: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [title] Tag前端封装
       *   // 图标标签主表前端封装
       *   data?: {
       *     // [title] 乐观锁
       *     version?: number
       *     // [title] 创建人
       *     creatorId?: number
       *     // [title] 创建时间
       *     createTime?: string
       *     // [title] 更新人
       *     updaterId?: number
       *     // [title] 更新时间
       *     updateTime?: string
       *     // [title] 标签名
       *     tag?: string
       *     // [title] 标签类型ID列表
       *     // [items] start
       *     // [title] 标签类型ID列表
       *     // [items] end
       *     typeIdList?: number[]
       *     // [title] 图标ID
       *     iconId?: number
       *     // [title] 图标url
       *     url?: string
       *   }
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      getTag<
        Config extends Alova2MethodConfig<RTagVo> & {
          pathParams: {
            name: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<RTagVo, 'tag.getTag', Config>;
      /**
       * ---
       *
       * [POST] 列出标签
       *
       * **path:** /api/tag/get/list
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 标签名列表
       *   // [items] start
       *   // [title] 标签名列表
       *   // [items] end
       *   tagList?: string[]
       *   // [title]  图标标签分类列表
       *   // [items] start
       *   // [title]  图标标签分类列表
       *   // [items] end
       *   typeIdList?: number[]
       *   // [title] 当前页，从1开始
       *   current?: number
       *   // [title] 每页大小，默认为10
       *   size?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [title] 分页记录前端封装
       *   // 分页记录前端封装
       *   data?: {
       *     // [items] start
       *     // [title] Tag前端封装
       *     // 图标标签主表前端封装
       *     // [items] end
       *     record?: Array<{
       *       // [title] 乐观锁
       *       version?: number
       *       // [title] 创建人
       *       creatorId?: number
       *       // [title] 创建时间
       *       createTime?: string
       *       // [title] 更新人
       *       updaterId?: number
       *       // [title] 更新时间
       *       updateTime?: string
       *       // [title] 标签名
       *       tag?: string
       *       // [title] 标签类型ID列表
       *       // [items] start
       *       // [title] 标签类型ID列表
       *       // [items] end
       *       typeIdList?: number[]
       *       // [title] 图标ID
       *       iconId?: number
       *       // [title] 图标url
       *       url?: string
       *     }>
       *     total?: number
       *     size?: number
       *   }
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      listTag<
        Config extends Alova2MethodConfig<RPageListVoTagVo> & {
          data: TagSearchVo;
        }
      >(
        config: Config
      ): Alova2Method<RPageListVoTagVo, 'tag.listTag', Config>;
    };
    route: {
      /**
       * ---
       *
       * [PUT] 新增路线
       *
       * **path:** /api/route/add
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 乐观锁
       *   version?: number
       *   // [title] ID
       *   id?: number
       *   // [title] 创建人
       *   creatorId?: number
       *   // [title] 创建时间
       *   createTime?: string
       *   // [title] 更新人
       *   updaterId?: number
       *   // [title] 更新时间
       *   updateTime?: string
       *   // [title] 路线名称
       *   name?: string
       *   // [title] 路线描述
       *   content?: string
       *   // [title] 点位顺序数组
       *   // [items] start
       *   // [title] 点位顺序数组
       *   // [items] end
       *   markerList?: object[]
       *   // [title] 显隐等级
       *   hiddenFlag?: number
       *   // [title] 视频地址
       *   video?: string
       *   // [title] 额外信息
       *   extra?: Record<string, object>
       *   // [title] 创建人昵称
       *   creatorNickname?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: number
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      createRoute<
        Config extends Alova2MethodConfig<RLong> & {
          data: RouteVo;
        }
      >(
        config: Config
      ): Alova2Method<RLong, 'route.createRoute', Config>;
      /**
       * ---
       *
       * [POST] 修改路线
       *
       * **path:** /api/route
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 乐观锁
       *   version?: number
       *   // [title] ID
       *   id?: number
       *   // [title] 创建人
       *   creatorId?: number
       *   // [title] 创建时间
       *   createTime?: string
       *   // [title] 更新人
       *   updaterId?: number
       *   // [title] 更新时间
       *   updateTime?: string
       *   // [title] 路线名称
       *   name?: string
       *   // [title] 路线描述
       *   content?: string
       *   // [title] 点位顺序数组
       *   // [items] start
       *   // [title] 点位顺序数组
       *   // [items] end
       *   markerList?: object[]
       *   // [title] 显隐等级
       *   hiddenFlag?: number
       *   // [title] 视频地址
       *   video?: string
       *   // [title] 额外信息
       *   extra?: Record<string, object>
       *   // [title] 创建人昵称
       *   creatorNickname?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      updateRoute<
        Config extends Alova2MethodConfig<RBoolean> & {
          data: RouteVo;
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'route.updateRoute', Config>;
      /**
       * ---
       *
       * [POST] 根据条件筛选分页查询路线信息
       *
       * **path:** /api/route/get/search
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 路线名称模糊搜索字段
       *   namePart?: string
       *   // [title] 创建人昵称模糊搜索字段，此字段不能与创建人id字段共存
       *   creatorNicknamePart?: string
       *   // [title] 创建人id，此字段不能与昵称模糊搜索字段共存
       *   creatorId?: string
       *   // [title] 当前页，从1开始
       *   current?: number
       *   // [title] 每页大小，默认为10
       *   size?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [title] 分页记录前端封装
       *   // 分页记录前端封装
       *   data?: {
       *     // [items] start
       *     // [title] Route前端封装
       *     // 路线前端封装
       *     // [items] end
       *     record?: Array<{
       *       // [title] 乐观锁
       *       version?: number
       *       // [title] ID
       *       id?: number
       *       // [title] 创建人
       *       creatorId?: number
       *       // [title] 创建时间
       *       createTime?: string
       *       // [title] 更新人
       *       updaterId?: number
       *       // [title] 更新时间
       *       updateTime?: string
       *       // [title] 路线名称
       *       name?: string
       *       // [title] 路线描述
       *       content?: string
       *       // [title] 点位顺序数组
       *       // [items] start
       *       // [title] 点位顺序数组
       *       // [items] end
       *       markerList?: object[]
       *       // [title] 显隐等级
       *       hiddenFlag?: number
       *       // [title] 视频地址
       *       video?: string
       *       // [title] 额外信息
       *       extra?: Record<string, object>
       *       // [title] 创建人昵称
       *       creatorNickname?: string
       *     }>
       *     total?: number
       *     size?: number
       *   }
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      listRoutePageSearch<
        Config extends Alova2MethodConfig<RPageListVoRouteVo> & {
          data: RouteSearchVo;
        }
      >(
        config: Config
      ): Alova2Method<RPageListVoRouteVo, 'route.listRoutePageSearch', Config>;
      /**
       * ---
       *
       * [POST] 分页查询所有路线信息
       *
       * **path:** /api/route/get/page
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 当前页，从1开始
       *   current?: number
       *   // [title] 每页大小，默认为10
       *   size?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [title] 分页记录前端封装
       *   // 分页记录前端封装
       *   data?: {
       *     // [items] start
       *     // [title] Route前端封装
       *     // 路线前端封装
       *     // [items] end
       *     record?: Array<{
       *       // [title] 乐观锁
       *       version?: number
       *       // [title] ID
       *       id?: number
       *       // [title] 创建人
       *       creatorId?: number
       *       // [title] 创建时间
       *       createTime?: string
       *       // [title] 更新人
       *       updaterId?: number
       *       // [title] 更新时间
       *       updateTime?: string
       *       // [title] 路线名称
       *       name?: string
       *       // [title] 路线描述
       *       content?: string
       *       // [title] 点位顺序数组
       *       // [items] start
       *       // [title] 点位顺序数组
       *       // [items] end
       *       markerList?: object[]
       *       // [title] 显隐等级
       *       hiddenFlag?: number
       *       // [title] 视频地址
       *       video?: string
       *       // [title] 额外信息
       *       extra?: Record<string, object>
       *       // [title] 创建人昵称
       *       creatorNickname?: string
       *     }>
       *     total?: number
       *     size?: number
       *   }
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      listRoutePage<
        Config extends Alova2MethodConfig<RPageListVoRouteVo> & {
          data: PageSearchVo;
        }
      >(
        config: Config
      ): Alova2Method<RPageListVoRouteVo, 'route.listRoutePage', Config>;
      /**
       * ---
       *
       * [POST] 根据id列表查询路线信息
       *
       * **path:** /api/route/get/list_byid
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = number[]
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [items] start
       *   // [title] Route前端封装
       *   // 路线前端封装
       *   // [items] end
       *   data?: Array<{
       *     // [title] 乐观锁
       *     version?: number
       *     // [title] ID
       *     id?: number
       *     // [title] 创建人
       *     creatorId?: number
       *     // [title] 创建时间
       *     createTime?: string
       *     // [title] 更新人
       *     updaterId?: number
       *     // [title] 更新时间
       *     updateTime?: string
       *     // [title] 路线名称
       *     name?: string
       *     // [title] 路线描述
       *     content?: string
       *     // [title] 点位顺序数组
       *     // [items] start
       *     // [title] 点位顺序数组
       *     // [items] end
       *     markerList?: object[]
       *     // [title] 显隐等级
       *     hiddenFlag?: number
       *     // [title] 视频地址
       *     video?: string
       *     // [title] 额外信息
       *     extra?: Record<string, object>
       *     // [title] 创建人昵称
       *     creatorNickname?: string
       *   }>
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      listRouteById<
        Config extends Alova2MethodConfig<RListRouteVo> & {
          data: number[];
        }
      >(
        config: Config
      ): Alova2Method<RListRouteVo, 'route.listRouteById', Config>;
      /**
       * ---
       *
       * [DELETE] 删除路线
       *
       * **path:** /api/route/{routeId}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   routeId: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      deleteRoute<
        Config extends Alova2MethodConfig<RBoolean> & {
          pathParams: {
            routeId: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'route.deleteRoute', Config>;
    };
    resource: {
      /**
       * ---
       *
       * [PUT] 上传图片
       *
       * **path:** /api/res/upload/image
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   file?: Blob
       *   // [title] 资源上传前端封装
       *   // 资源上传前端封装
       *   uploadVo?: {
       *     // [title] 文件路径
       *     filePath?: string
       *     // [title] 文件地址
       *     fileUrl?: string
       *   }
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [title] 资源上传前端封装
       *   // 资源上传前端封装
       *   data?: {
       *     // [title] 文件路径
       *     filePath?: string
       *     // [title] 文件地址
       *     fileUrl?: string
       *   }
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      uploadImage<
        Config extends Alova2MethodConfig<RResourceUploadVo> & {
          data: {
            file?: Blob;
            /**
             * 资源上传前端封装
             * ---
             * 资源上传前端封装
             */
            uploadVo?: ResourceUploadVo;
          };
        }
      >(
        config: Config
      ): Alova2Method<RResourceUploadVo, 'resource.uploadImage', Config>;
    };
    punctuate: {
      /**
       * ---
       *
       * [PUT] 提交暂存点位
       *
       * **path:** /api/punctuate/
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 乐观锁
       *   version?: number
       *   // [title] ID
       *   id?: number
       *   // [title] 创建人
       *   creatorId?: number
       *   // [title] 创建时间
       *   createTime?: string
       *   // [title] 更新人
       *   updaterId?: number
       *   // [title] 更新时间
       *   updateTime?: string
       *   // [title] 点位提交ID
       *   punctuateId?: number
       *   // [title] 原有点位ID
       *   originalMarkerId?: number
       *   // [title] 点位名称
       *   markerTitle?: string
       *   // [title] 点位物品列表
       *   itemList?: string
       *   // [title] 点位坐标
       *   position?: string
       *   // [title] 点位说明
       *   content?: string
       *   // [title] 额外特殊字段
       *   extra?: Record<string, object>
       *   // [title] 点位图片
       *   picture?: string
       *   // [title] 点位初始标记者
       *   markerCreatorId?: number
       *   // [title] 点位图片上传者
       *   pictureCreatorId?: number
       *   // [title] 点位视频
       *   videoPath?: string
       *   // [title] 隐藏标志
       *   hiddenFlag?: number
       *   // [title] 点位提交者ID
       *   author?: number
       *   // [title] 状态;0:暂存 1:审核中 2:不通过
       *   status?: number
       *   // [title] 审核备注
       *   auditRemark?: string
       *   // [title] 操作类型;1: 新增 2: 修改 3: 删除
       *   methodType?: number
       *   // [title] 点位刷新时间
       *   refreshTime?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: number
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      addPunctuate<
        Config extends Alova2MethodConfig<RLong> & {
          data: MarkerPunctuateVo;
        }
      >(
        config: Config
      ): Alova2Method<RLong, 'punctuate.addPunctuate', Config>;
      /**
       * ---
       *
       * [POST] 修改自身未提交的暂存点位
       *
       * **path:** /api/punctuate/
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 乐观锁
       *   version?: number
       *   // [title] ID
       *   id?: number
       *   // [title] 创建人
       *   creatorId?: number
       *   // [title] 创建时间
       *   createTime?: string
       *   // [title] 更新人
       *   updaterId?: number
       *   // [title] 更新时间
       *   updateTime?: string
       *   // [title] 点位提交ID
       *   punctuateId?: number
       *   // [title] 原有点位ID
       *   originalMarkerId?: number
       *   // [title] 点位名称
       *   markerTitle?: string
       *   // [title] 点位物品列表
       *   itemList?: string
       *   // [title] 点位坐标
       *   position?: string
       *   // [title] 点位说明
       *   content?: string
       *   // [title] 额外特殊字段
       *   extra?: Record<string, object>
       *   // [title] 点位图片
       *   picture?: string
       *   // [title] 点位初始标记者
       *   markerCreatorId?: number
       *   // [title] 点位图片上传者
       *   pictureCreatorId?: number
       *   // [title] 点位视频
       *   videoPath?: string
       *   // [title] 隐藏标志
       *   hiddenFlag?: number
       *   // [title] 点位提交者ID
       *   author?: number
       *   // [title] 状态;0:暂存 1:审核中 2:不通过
       *   status?: number
       *   // [title] 审核备注
       *   auditRemark?: string
       *   // [title] 操作类型;1: 新增 2: 修改 3: 删除
       *   methodType?: number
       *   // [title] 点位刷新时间
       *   refreshTime?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      updateSelfPunctuate<
        Config extends Alova2MethodConfig<RBoolean> & {
          data: MarkerPunctuateVo;
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'punctuate.updateSelfPunctuate', Config>;
      /**
       * ---
       *
       * [PUT] 将暂存点位提交审核
       *
       * **path:** /api/punctuate/push/{authorId}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   authorId: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      pushPunctuate<
        Config extends Alova2MethodConfig<RBoolean> & {
          pathParams: {
            authorId: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'punctuate.pushPunctuate', Config>;
      /**
       * ---
       *
       * [POST] 分页查询所有打点信息
       *
       * **path:** /api/punctuate/get/page
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 当前页，从1开始
       *   current?: number
       *   // [title] 每页大小，默认为10
       *   size?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [title] 分页记录前端封装
       *   // 分页记录前端封装
       *   data?: {
       *     // [items] start
       *     // [title] MarkerPunctuate前端封装
       *     // 点位提交表前端封装
       *     // [items] end
       *     record?: Array<{
       *       // [title] 乐观锁
       *       version?: number
       *       // [title] ID
       *       id?: number
       *       // [title] 创建人
       *       creatorId?: number
       *       // [title] 创建时间
       *       createTime?: string
       *       // [title] 更新人
       *       updaterId?: number
       *       // [title] 更新时间
       *       updateTime?: string
       *       // [title] 点位提交ID
       *       punctuateId?: number
       *       // [title] 原有点位ID
       *       originalMarkerId?: number
       *       // [title] 点位名称
       *       markerTitle?: string
       *       // [title] 点位物品列表
       *       itemList?: string
       *       // [title] 点位坐标
       *       position?: string
       *       // [title] 点位说明
       *       content?: string
       *       // [title] 额外特殊字段
       *       extra?: Record<string, object>
       *       // [title] 点位图片
       *       picture?: string
       *       // [title] 点位初始标记者
       *       markerCreatorId?: number
       *       // [title] 点位图片上传者
       *       pictureCreatorId?: number
       *       // [title] 点位视频
       *       videoPath?: string
       *       // [title] 隐藏标志
       *       hiddenFlag?: number
       *       // [title] 点位提交者ID
       *       author?: number
       *       // [title] 状态;0:暂存 1:审核中 2:不通过
       *       status?: number
       *       // [title] 审核备注
       *       auditRemark?: string
       *       // [title] 操作类型;1: 新增 2: 修改 3: 删除
       *       methodType?: number
       *       // [title] 点位刷新时间
       *       refreshTime?: number
       *     }>
       *     total?: number
       *     size?: number
       *   }
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      listPunctuatePage<
        Config extends Alova2MethodConfig<RPageListVoMarkerPunctuateVo> & {
          data: PageSearchVo;
        }
      >(
        config: Config
      ): Alova2Method<RPageListVoMarkerPunctuateVo, 'punctuate.listPunctuatePage', Config>;
      /**
       * ---
       *
       * [POST] 分页查询自己提交的未通过的打点信息
       *
       * **path:** /api/punctuate/get/page/{authorId}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   authorId: number
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 当前页，从1开始
       *   current?: number
       *   // [title] 每页大小，默认为10
       *   size?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [title] 分页记录前端封装
       *   // 分页记录前端封装
       *   data?: {
       *     // [items] start
       *     // [title] MarkerPunctuate前端封装
       *     // 点位提交表前端封装
       *     // [items] end
       *     record?: Array<{
       *       // [title] 乐观锁
       *       version?: number
       *       // [title] ID
       *       id?: number
       *       // [title] 创建人
       *       creatorId?: number
       *       // [title] 创建时间
       *       createTime?: string
       *       // [title] 更新人
       *       updaterId?: number
       *       // [title] 更新时间
       *       updateTime?: string
       *       // [title] 点位提交ID
       *       punctuateId?: number
       *       // [title] 原有点位ID
       *       originalMarkerId?: number
       *       // [title] 点位名称
       *       markerTitle?: string
       *       // [title] 点位物品列表
       *       itemList?: string
       *       // [title] 点位坐标
       *       position?: string
       *       // [title] 点位说明
       *       content?: string
       *       // [title] 额外特殊字段
       *       extra?: Record<string, object>
       *       // [title] 点位图片
       *       picture?: string
       *       // [title] 点位初始标记者
       *       markerCreatorId?: number
       *       // [title] 点位图片上传者
       *       pictureCreatorId?: number
       *       // [title] 点位视频
       *       videoPath?: string
       *       // [title] 隐藏标志
       *       hiddenFlag?: number
       *       // [title] 点位提交者ID
       *       author?: number
       *       // [title] 状态;0:暂存 1:审核中 2:不通过
       *       status?: number
       *       // [title] 审核备注
       *       auditRemark?: string
       *       // [title] 操作类型;1: 新增 2: 修改 3: 删除
       *       methodType?: number
       *       // [title] 点位刷新时间
       *       refreshTime?: number
       *     }>
       *     total?: number
       *     size?: number
       *   }
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      listSelfPunctuatePage<
        Config extends Alova2MethodConfig<RPageListVoMarkerPunctuateVo> & {
          pathParams: {
            authorId: number;
          };
          data: PageSearchVo;
        }
      >(
        config: Config
      ): Alova2Method<RPageListVoMarkerPunctuateVo, 'punctuate.listSelfPunctuatePage', Config>;
      /**
       * ---
       *
       * [DELETE] 删除自己未通过的提交点位
       *
       * **path:** /api/punctuate/delete/{authorId}/{punctuateId}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   punctuateId: number
       *   authorId: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      deleteSelfPunctuate<
        Config extends Alova2MethodConfig<RBoolean> & {
          pathParams: {
            punctuateId: number;
            authorId: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'punctuate.deleteSelfPunctuate', Config>;
    };
    notice: {
      /**
       * ---
       *
       * [PUT] 新增公告
       *
       * **path:** /api/notice/add
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 乐观锁
       *   version?: number
       *   // [title] ID
       *   id?: number
       *   // [title] 创建人
       *   creatorId?: number
       *   // [title] 创建时间
       *   createTime?: string
       *   // [title] 更新人
       *   updaterId?: number
       *   // [title] 更新时间
       *   updateTime?: string
       *   // [title] 频道
       *   // [items] start
       *   // [title] 频道
       *   // [items] end
       *   channel?: string[]
       *   // [title] 标题
       *   title?: string
       *   // [title] 内容
       *   content?: string
       *   // [title] 排序
       *   sortIndex?: number
       *   // [title] 有效期开始时间
       *   validTimeStart?: string
       *   // [title] 有效期结束时间
       *   validTimeEnd?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: number
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      createNotice<
        Config extends Alova2MethodConfig<RLong> & {
          data: NoticeVo;
        }
      >(
        config: Config
      ): Alova2Method<RLong, 'notice.createNotice', Config>;
      /**
       * ---
       *
       * [POST] 修改公告
       *
       * **path:** /api/notice/update
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 乐观锁
       *   version?: number
       *   // [title] ID
       *   id?: number
       *   // [title] 创建人
       *   creatorId?: number
       *   // [title] 创建时间
       *   createTime?: string
       *   // [title] 更新人
       *   updaterId?: number
       *   // [title] 更新时间
       *   updateTime?: string
       *   // [title] 频道
       *   // [items] start
       *   // [title] 频道
       *   // [items] end
       *   channel?: string[]
       *   // [title] 标题
       *   title?: string
       *   // [title] 内容
       *   content?: string
       *   // [title] 排序
       *   sortIndex?: number
       *   // [title] 有效期开始时间
       *   validTimeStart?: string
       *   // [title] 有效期结束时间
       *   validTimeEnd?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      updateNotice<
        Config extends Alova2MethodConfig<RBoolean> & {
          data: NoticeVo;
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'notice.updateNotice', Config>;
      /**
       * ---
       *
       * [POST] 分页查询所有公告信息
       *
       * **path:** /api/notice/get/list
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 频道
       *   // [items] start
       *   // [title] 频道
       *   // [items] end
       *   channels?: string[]
       *   // [title] 标题
       *   title?: string
       *   // [title] 获取有效数据
       *   getValid?: boolean
       *   // [title] 数据转换器
       *   transformer?: string
       *   // [title] 排序条件
       *   // [items] start
       *   // [title] 排序条件
       *   // [items] end
       *   sort?: string[]
       *   // [title] 当前页，从1开始
       *   current?: number
       *   // [title] 每页大小，默认为10
       *   size?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [title] 分页记录前端封装
       *   // 分页记录前端封装
       *   data?: {
       *     // [items] start
       *     // [title] Notice前端封装
       *     // 消息通知前端封装
       *     // [items] end
       *     record?: Array<{
       *       // [title] 乐观锁
       *       version?: number
       *       // [title] ID
       *       id?: number
       *       // [title] 创建人
       *       creatorId?: number
       *       // [title] 创建时间
       *       createTime?: string
       *       // [title] 更新人
       *       updaterId?: number
       *       // [title] 更新时间
       *       updateTime?: string
       *       // [title] 频道
       *       // [items] start
       *       // [title] 频道
       *       // [items] end
       *       channel?: string[]
       *       // [title] 标题
       *       title?: string
       *       // [title] 内容
       *       content?: string
       *       // [title] 排序
       *       sortIndex?: number
       *       // [title] 有效期开始时间
       *       validTimeStart?: string
       *       // [title] 有效期结束时间
       *       validTimeEnd?: string
       *     }>
       *     total?: number
       *     size?: number
       *   }
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      listNotice<
        Config extends Alova2MethodConfig<RPageListVoNoticeVo> & {
          data: NoticeSearchVo;
        }
      >(
        config: Config
      ): Alova2Method<RPageListVoNoticeVo, 'notice.listNotice', Config>;
      /**
       * ---
       *
       * [DELETE] 删除公告
       *
       * **path:** /api/notice/{noticeId}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   noticeId: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      deleteNotice<
        Config extends Alova2MethodConfig<RBoolean> & {
          pathParams: {
            noticeId: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'notice.deleteNotice', Config>;
    };
    marker: {
      /**
       * ---
       *
       * [PUT] 新增点位（不包括额外字段）
       *
       * **path:** /api/marker/single
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 乐观锁
       *   version?: number
       *   // [title] ID
       *   id?: number
       *   // [title] 创建人
       *   creatorId?: number
       *   // [title] 创建时间
       *   createTime?: string
       *   // [title] 更新人
       *   updaterId?: number
       *   // [title] 更新时间
       *   updateTime?: string
       *   // [title] 点位签戳（用于兼容旧点位ID）
       *   markerStamp?: string
       *   // [title] 点位名称
       *   markerTitle?: string
       *   // [title] 点位坐标
       *   position?: string
       *   // [title] 点位物品列表
       *   // [items] start
       *   // [title] MarkerItemLink前端封装
       *   // 点位-物品关联表前端封装
       *   // [items] end
       *   itemList?: Array<{
       *     // [title] 物品ID
       *     itemId?: number
       *     // [title] 物品于该点位数量
       *     count?: number
       *     // [title] 图标标签
       *     iconTag?: string
       *   }>
       *   // [title] 点位说明
       *   content?: string
       *   // [title] 点位图片
       *   picture?: string
       *   // [title] 点位初始标记者
       *   markerCreatorId?: number
       *   // [title] 点位图片上传者
       *   pictureCreatorId?: number
       *   // [title] 点位视频
       *   videoPath?: string
       *   // [title] 点位刷新时间;单位:毫秒
       *   refreshTime?: number
       *   // [title] 隐藏标志
       *   hiddenFlag?: number
       *   // [title] 额外特殊字段
       *   extra?: Record<string, object>
       *   // [title] 点位关联组ID
       *   linkageId?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: number
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      createMarker<
        Config extends Alova2MethodConfig<RLong> & {
          data: MarkerVo;
        }
      >(
        config: Config
      ): Alova2Method<RLong, 'marker.createMarker', Config>;
      /**
       * ---
       *
       * [POST] 修改点位（不包括额外字段）
       *
       * **path:** /api/marker/single
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 乐观锁
       *   version?: number
       *   // [title] ID
       *   id?: number
       *   // [title] 创建人
       *   creatorId?: number
       *   // [title] 创建时间
       *   createTime?: string
       *   // [title] 更新人
       *   updaterId?: number
       *   // [title] 更新时间
       *   updateTime?: string
       *   // [title] 点位签戳（用于兼容旧点位ID）
       *   markerStamp?: string
       *   // [title] 点位名称
       *   markerTitle?: string
       *   // [title] 点位坐标
       *   position?: string
       *   // [title] 点位物品列表
       *   // [items] start
       *   // [title] MarkerItemLink前端封装
       *   // 点位-物品关联表前端封装
       *   // [items] end
       *   itemList?: Array<{
       *     // [title] 物品ID
       *     itemId?: number
       *     // [title] 物品于该点位数量
       *     count?: number
       *     // [title] 图标标签
       *     iconTag?: string
       *   }>
       *   // [title] 点位说明
       *   content?: string
       *   // [title] 点位图片
       *   picture?: string
       *   // [title] 点位初始标记者
       *   markerCreatorId?: number
       *   // [title] 点位图片上传者
       *   pictureCreatorId?: number
       *   // [title] 点位视频
       *   videoPath?: string
       *   // [title] 点位刷新时间;单位:毫秒
       *   refreshTime?: number
       *   // [title] 隐藏标志
       *   hiddenFlag?: number
       *   // [title] 额外特殊字段
       *   extra?: Record<string, object>
       *   // [title] 点位关联组ID
       *   linkageId?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      updateMarker<
        Config extends Alova2MethodConfig<RBoolean> & {
          data: MarkerVo;
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'marker.updateMarker', Config>;
      /**
       * ---
       *
       * [POST] 调整点位
       *
       * **path:** /api/marker/tweak
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = Array<{
       *   // [title] 点位ID
       *   // [items] start
       *   // [title] 点位ID
       *   // [items] end
       *   markerIds?: number[]
       *   // [title] 点位数据调整配置
       *   // [items] start
       *   // [title] 点位调整配置项前端封装
       *   // [items] end
       *   tweaks?: Array<{
       *     // [title] 需调整的点位属性
       *     prop?: string
       *     // [title] 调整方法类型
       *     type?: string
       *     // [title] 调整配置数据前端封装
       *     // 此项根据调整方法类型使用不同的数据字段
       *     meta?: {
       *       // [title] 数据值
       *       value?: object
       *       // [title] 检查文本
       *       test?: string
       *       // [title] 替换为
       *       replace?: string
       *       // [title] 键值对映射
       *       map?: Record<string, object>
       *       // [title] 物品关联
       *       // [items] start
       *       // [title] MarkerItemLink前端封装
       *       // 点位-物品关联表前端封装
       *       // [items] end
       *       itemList?: Array<{
       *         // [title] 物品ID
       *         itemId?: number
       *         // [title] 物品于该点位数量
       *         count?: number
       *         // [title] 图标标签
       *         iconTag?: string
       *       }>
       *     }
       *   }>
       * }>
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [items] start
       *   // [title] Marker前端封装
       *   // 点位主表前端封装
       *   // [items] end
       *   data?: Array<{
       *     // [title] 乐观锁
       *     version?: number
       *     // [title] ID
       *     id?: number
       *     // [title] 创建人
       *     creatorId?: number
       *     // [title] 创建时间
       *     createTime?: string
       *     // [title] 更新人
       *     updaterId?: number
       *     // [title] 更新时间
       *     updateTime?: string
       *     // [title] 点位签戳（用于兼容旧点位ID）
       *     markerStamp?: string
       *     // [title] 点位名称
       *     markerTitle?: string
       *     // [title] 点位坐标
       *     position?: string
       *     // [title] 点位物品列表
       *     // [items] start
       *     // [title] MarkerItemLink前端封装
       *     // 点位-物品关联表前端封装
       *     // [items] end
       *     itemList?: Array<{
       *       // [title] 物品ID
       *       itemId?: number
       *       // [title] 物品于该点位数量
       *       count?: number
       *       // [title] 图标标签
       *       iconTag?: string
       *     }>
       *     // [title] 点位说明
       *     content?: string
       *     // [title] 点位图片
       *     picture?: string
       *     // [title] 点位初始标记者
       *     markerCreatorId?: number
       *     // [title] 点位图片上传者
       *     pictureCreatorId?: number
       *     // [title] 点位视频
       *     videoPath?: string
       *     // [title] 点位刷新时间;单位:毫秒
       *     refreshTime?: number
       *     // [title] 隐藏标志
       *     hiddenFlag?: number
       *     // [title] 额外特殊字段
       *     extra?: Record<string, object>
       *     // [title] 点位关联组ID
       *     linkageId?: string
       *   }>
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      tweakMarkers<
        Config extends Alova2MethodConfig<RListMarkerVo> & {
          data: TweakVo[];
        }
      >(
        config: Config
      ): Alova2Method<RListMarkerVo, 'marker.tweakMarkers', Config>;
      /**
       * ---
       *
       * [POST] 分页查询所有点位信息
       *
       * **path:** /api/marker/get/page
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 当前页，从1开始
       *   current?: number
       *   // [title] 每页大小，默认为10
       *   size?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [title] 分页记录前端封装
       *   // 分页记录前端封装
       *   data?: {
       *     // [items] start
       *     // [title] Marker前端封装
       *     // 点位主表前端封装
       *     // [items] end
       *     record?: Array<{
       *       // [title] 乐观锁
       *       version?: number
       *       // [title] ID
       *       id?: number
       *       // [title] 创建人
       *       creatorId?: number
       *       // [title] 创建时间
       *       createTime?: string
       *       // [title] 更新人
       *       updaterId?: number
       *       // [title] 更新时间
       *       updateTime?: string
       *       // [title] 点位签戳（用于兼容旧点位ID）
       *       markerStamp?: string
       *       // [title] 点位名称
       *       markerTitle?: string
       *       // [title] 点位坐标
       *       position?: string
       *       // [title] 点位物品列表
       *       // [items] start
       *       // [title] MarkerItemLink前端封装
       *       // 点位-物品关联表前端封装
       *       // [items] end
       *       itemList?: Array<{
       *         // [title] 物品ID
       *         itemId?: number
       *         // [title] 物品于该点位数量
       *         count?: number
       *         // [title] 图标标签
       *         iconTag?: string
       *       }>
       *       // [title] 点位说明
       *       content?: string
       *       // [title] 点位图片
       *       picture?: string
       *       // [title] 点位初始标记者
       *       markerCreatorId?: number
       *       // [title] 点位图片上传者
       *       pictureCreatorId?: number
       *       // [title] 点位视频
       *       videoPath?: string
       *       // [title] 点位刷新时间;单位:毫秒
       *       refreshTime?: number
       *       // [title] 隐藏标志
       *       hiddenFlag?: number
       *       // [title] 额外特殊字段
       *       extra?: Record<string, object>
       *       // [title] 点位关联组ID
       *       linkageId?: string
       *     }>
       *     total?: number
       *     size?: number
       *   }
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      listMarkerPage<
        Config extends Alova2MethodConfig<RPageListVoMarkerVo> & {
          data: PageSearchVo;
        }
      >(
        config: Config
      ): Alova2Method<RPageListVoMarkerVo, 'marker.listMarkerPage', Config>;
      /**
       * ---
       *
       * [POST] 根据各种条件筛选查询点位信息
       *
       * **path:** /api/marker/get/list_byinfo
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 地区ID列表
       *   // [items] start
       *   // [title] 地区ID列表
       *   // [items] end
       *   areaIdList?: number[]
       *   // [title] 物品ID列表
       *   // [items] start
       *   // [title] 物品ID列表
       *   // [items] end
       *   itemIdList?: number[]
       *   // [title] 类型ID列表
       *   // [items] start
       *   // [title] 类型ID列表
       *   // [items] end
       *   typeIdList?: number[]
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [items] start
       *   // [title] Marker前端封装
       *   // 点位主表前端封装
       *   // [items] end
       *   data?: Array<{
       *     // [title] 乐观锁
       *     version?: number
       *     // [title] ID
       *     id?: number
       *     // [title] 创建人
       *     creatorId?: number
       *     // [title] 创建时间
       *     createTime?: string
       *     // [title] 更新人
       *     updaterId?: number
       *     // [title] 更新时间
       *     updateTime?: string
       *     // [title] 点位签戳（用于兼容旧点位ID）
       *     markerStamp?: string
       *     // [title] 点位名称
       *     markerTitle?: string
       *     // [title] 点位坐标
       *     position?: string
       *     // [title] 点位物品列表
       *     // [items] start
       *     // [title] MarkerItemLink前端封装
       *     // 点位-物品关联表前端封装
       *     // [items] end
       *     itemList?: Array<{
       *       // [title] 物品ID
       *       itemId?: number
       *       // [title] 物品于该点位数量
       *       count?: number
       *       // [title] 图标标签
       *       iconTag?: string
       *     }>
       *     // [title] 点位说明
       *     content?: string
       *     // [title] 点位图片
       *     picture?: string
       *     // [title] 点位初始标记者
       *     markerCreatorId?: number
       *     // [title] 点位图片上传者
       *     pictureCreatorId?: number
       *     // [title] 点位视频
       *     videoPath?: string
       *     // [title] 点位刷新时间;单位:毫秒
       *     refreshTime?: number
       *     // [title] 隐藏标志
       *     hiddenFlag?: number
       *     // [title] 额外特殊字段
       *     extra?: Record<string, object>
       *     // [title] 点位关联组ID
       *     linkageId?: string
       *   }>
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      searchMarker<
        Config extends Alova2MethodConfig<RListMarkerVo> & {
          data: MarkerSearchVo;
        }
      >(
        config: Config
      ): Alova2Method<RListMarkerVo, 'marker.searchMarker', Config>;
      /**
       * ---
       *
       * [POST] 通过ID列表查询点位信息
       *
       * **path:** /api/marker/get/list_byid
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = number[]
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [items] start
       *   // [title] Marker前端封装
       *   // 点位主表前端封装
       *   // [items] end
       *   data?: Array<{
       *     // [title] 乐观锁
       *     version?: number
       *     // [title] ID
       *     id?: number
       *     // [title] 创建人
       *     creatorId?: number
       *     // [title] 创建时间
       *     createTime?: string
       *     // [title] 更新人
       *     updaterId?: number
       *     // [title] 更新时间
       *     updateTime?: string
       *     // [title] 点位签戳（用于兼容旧点位ID）
       *     markerStamp?: string
       *     // [title] 点位名称
       *     markerTitle?: string
       *     // [title] 点位坐标
       *     position?: string
       *     // [title] 点位物品列表
       *     // [items] start
       *     // [title] MarkerItemLink前端封装
       *     // 点位-物品关联表前端封装
       *     // [items] end
       *     itemList?: Array<{
       *       // [title] 物品ID
       *       itemId?: number
       *       // [title] 物品于该点位数量
       *       count?: number
       *       // [title] 图标标签
       *       iconTag?: string
       *     }>
       *     // [title] 点位说明
       *     content?: string
       *     // [title] 点位图片
       *     picture?: string
       *     // [title] 点位初始标记者
       *     markerCreatorId?: number
       *     // [title] 点位图片上传者
       *     pictureCreatorId?: number
       *     // [title] 点位视频
       *     videoPath?: string
       *     // [title] 点位刷新时间;单位:毫秒
       *     refreshTime?: number
       *     // [title] 隐藏标志
       *     hiddenFlag?: number
       *     // [title] 额外特殊字段
       *     extra?: Record<string, object>
       *     // [title] 点位关联组ID
       *     linkageId?: string
       *   }>
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      listMarkerById<
        Config extends Alova2MethodConfig<RListMarkerVo> & {
          data: number[];
        }
      >(
        config: Config
      ): Alova2Method<RListMarkerVo, 'marker.listMarkerById', Config>;
      /**
       * ---
       *
       * [POST] 根据各种条件筛选查询点位ID
       *
       * **path:** /api/marker/get/id
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 地区ID列表
       *   // [items] start
       *   // [title] 地区ID列表
       *   // [items] end
       *   areaIdList?: number[]
       *   // [title] 物品ID列表
       *   // [items] start
       *   // [title] 物品ID列表
       *   // [items] end
       *   itemIdList?: number[]
       *   // [title] 类型ID列表
       *   // [items] start
       *   // [title] 类型ID列表
       *   // [items] end
       *   typeIdList?: number[]
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [items] start
       *   // [items] end
       *   data?: number[]
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      searchMarkerId<
        Config extends Alova2MethodConfig<RListLong> & {
          data: MarkerSearchVo;
        }
      >(
        config: Config
      ): Alova2Method<RListLong, 'marker.searchMarkerId', Config>;
      /**
       * ---
       *
       * [DELETE] 删除点位
       *
       * **path:** /api/marker/{markerId}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   markerId: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      deleteMarker<
        Config extends Alova2MethodConfig<RBoolean> & {
          pathParams: {
            markerId: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'marker.deleteMarker', Config>;
    };
    item_type: {
      /**
       * ---
       *
       * [PUT] 添加物品类型
       *
       * **path:** /api/item_type/add
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 乐观锁
       *   version?: number
       *   // [title] ID
       *   id?: number
       *   // [title] 创建人
       *   creatorId?: number
       *   // [title] 创建时间
       *   createTime?: string
       *   // [title] 更新人
       *   updaterId?: number
       *   // [title] 更新时间
       *   updateTime?: string
       *   // [title] 图标标签
       *   iconTag?: string
       *   // [title] 类型名
       *   name?: string
       *   // [title] 类型补充说明
       *   content?: string
       *   // [title] 父级类型ID（无父级则为-1）
       *   parentId?: number
       *   // [title] 是否为末端类型
       *   isFinal?: boolean
       *   // [title] 隐藏标记
       *   hiddenFlag?: number
       *   // [title] 排序
       *   sortIndex?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: number
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      addItemType<
        Config extends Alova2MethodConfig<RLong> & {
          data: ItemTypeVo;
        }
      >(
        config: Config
      ): Alova2Method<RLong, 'item_type.addItemType', Config>;
      /**
       * ---
       *
       * [POST] 修改物品类型
       *
       * **path:** /api/item_type/update
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 乐观锁
       *   version?: number
       *   // [title] ID
       *   id?: number
       *   // [title] 创建人
       *   creatorId?: number
       *   // [title] 创建时间
       *   createTime?: string
       *   // [title] 更新人
       *   updaterId?: number
       *   // [title] 更新时间
       *   updateTime?: string
       *   // [title] 图标标签
       *   iconTag?: string
       *   // [title] 类型名
       *   name?: string
       *   // [title] 类型补充说明
       *   content?: string
       *   // [title] 父级类型ID（无父级则为-1）
       *   parentId?: number
       *   // [title] 是否为末端类型
       *   isFinal?: boolean
       *   // [title] 隐藏标记
       *   hiddenFlag?: number
       *   // [title] 排序
       *   sortIndex?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      updateItemType<
        Config extends Alova2MethodConfig<RBoolean> & {
          data: ItemTypeVo;
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'item_type.updateItemType', Config>;
      /**
       * ---
       *
       * [POST] 批量移动类型为目标类型的子类型
       *
       * **path:** /api/item_type/move/{targetTypeId}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   targetTypeId: number
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = number[]
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      moveItemType<
        Config extends Alova2MethodConfig<RBoolean> & {
          pathParams: {
            targetTypeId: number;
          };
          data: number[];
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'item_type.moveItemType', Config>;
      /**
       * ---
       *
       * [POST] 列出所有物品类型
       *
       * **path:** /api/item_type/get/list_all
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [items] start
       *   // [title] ItemType前端封装
       *   // 物品类型表前端封装
       *   // [items] end
       *   data?: Array<{
       *     // [title] 乐观锁
       *     version?: number
       *     // [title] ID
       *     id?: number
       *     // [title] 创建人
       *     creatorId?: number
       *     // [title] 创建时间
       *     createTime?: string
       *     // [title] 更新人
       *     updaterId?: number
       *     // [title] 更新时间
       *     updateTime?: string
       *     // [title] 图标标签
       *     iconTag?: string
       *     // [title] 类型名
       *     name?: string
       *     // [title] 类型补充说明
       *     content?: string
       *     // [title] 父级类型ID（无父级则为-1）
       *     parentId?: number
       *     // [title] 是否为末端类型
       *     isFinal?: boolean
       *     // [title] 隐藏标记
       *     hiddenFlag?: number
       *     // [title] 排序
       *     sortIndex?: number
       *   }>
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      listItemType<Config extends Alova2MethodConfig<RListItemTypeVo>>(
        config?: Config
      ): Alova2Method<RListItemTypeVo, 'item_type.listItemType', Config>;
      /**
       * ---
       *
       * [POST] 列出物品类型
       *
       * **path:** /api/item_type/get/list/{self}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   self: number
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 当前页，从1开始
       *   current?: number
       *   // [title] 每页大小，默认为10
       *   size?: number
       *   // [title] 父级类型ID列表
       *   // [items] start
       *   // [title] 父级类型ID列表
       *   // [items] end
       *   typeIdList?: number[]
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [title] 分页记录前端封装
       *   // 分页记录前端封装
       *   data?: {
       *     // [items] start
       *     // [title] ItemType前端封装
       *     // 物品类型表前端封装
       *     // [items] end
       *     record?: Array<{
       *       // [title] 乐观锁
       *       version?: number
       *       // [title] ID
       *       id?: number
       *       // [title] 创建人
       *       creatorId?: number
       *       // [title] 创建时间
       *       createTime?: string
       *       // [title] 更新人
       *       updaterId?: number
       *       // [title] 更新时间
       *       updateTime?: string
       *       // [title] 图标标签
       *       iconTag?: string
       *       // [title] 类型名
       *       name?: string
       *       // [title] 类型补充说明
       *       content?: string
       *       // [title] 父级类型ID（无父级则为-1）
       *       parentId?: number
       *       // [title] 是否为末端类型
       *       isFinal?: boolean
       *       // [title] 隐藏标记
       *       hiddenFlag?: number
       *       // [title] 排序
       *       sortIndex?: number
       *     }>
       *     total?: number
       *     size?: number
       *   }
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      listItemType_1<
        Config extends Alova2MethodConfig<RPageListVoItemTypeVo> & {
          pathParams: {
            self: number;
          };
          data: PageAndTypeSearchVo;
        }
      >(
        config: Config
      ): Alova2Method<RPageListVoItemTypeVo, 'item_type.listItemType_1', Config>;
      /**
       * ---
       *
       * [DELETE] 删除物品类型
       *
       * **path:** /api/item_type/delete/{itemTypeId}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   itemTypeId: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      deleteItemType<
        Config extends Alova2MethodConfig<RBoolean> & {
          pathParams: {
            itemTypeId: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'item_type.deleteItemType', Config>;
    };
    item_common: {
      /**
       * ---
       *
       * [PUT] 新增地区公用物品
       *
       * **path:** /api/item_common/add
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = number[]
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      addCommonItem<
        Config extends Alova2MethodConfig<RBoolean> & {
          data: number[];
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'item_common.addCommonItem', Config>;
      /**
       * ---
       *
       * [POST] 列出地区公用物品
       *
       * **path:** /api/item_common/get/list
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 当前页，从1开始
       *   current?: number
       *   // [title] 每页大小，默认为10
       *   size?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [title] 分页记录前端封装
       *   // 分页记录前端封装
       *   data?: {
       *     // [items] start
       *     // [title] ItemAreaPublic前端封装
       *     // 地区公用物品记录表前端封装
       *     // [items] end
       *     record?: Array<{
       *       // [title] 乐观锁
       *       version?: number
       *       // [title] ID
       *       id?: number
       *       // [title] 创建人
       *       creatorId?: number
       *       // [title] 创建时间
       *       createTime?: string
       *       // [title] 更新人
       *       updaterId?: number
       *       // [title] 更新时间
       *       updateTime?: string
       *       // [title] 物品ID
       *       itemId?: number
       *       // [title] 物品名称
       *       name?: string
       *       // [title] 地区ID（须确保是末端地区）
       *       areaId?: number
       *       // [title] 默认刷新时间;单位:毫秒
       *       defaultRefreshTime?: number
       *       // [title] 默认描述模板;用于提交新物品点位时的描述模板
       *       defaultContent?: string
       *       // [title] 默认数量
       *       defaultCount?: number
       *       // [title] 图标标签
       *       iconTag?: string
       *       // [title] 图标样式类型
       *       iconStyleType?: number
       *       // [title] 隐藏标志
       *       hiddenFlag?: number
       *       // [title] 物品排序
       *       sortIndex?: number
       *       // [title] 特殊物品标记;二进制表示；低位第一位：前台是否显示
       *       specialFlag?: number
       *       // [title] 物品类型ID列表
       *       // [items] start
       *       // [title] 物品类型ID列表
       *       // [items] end
       *       typeIdList?: number[]
       *     }>
       *     total?: number
       *     size?: number
       *   }
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      listCommonItem<
        Config extends Alova2MethodConfig<RPageListVoItemAreaPublicVo> & {
          data: PageSearchVo;
        }
      >(
        config: Config
      ): Alova2Method<RPageListVoItemAreaPublicVo, 'item_common.listCommonItem', Config>;
      /**
       * ---
       *
       * [DELETE] 删除地区公用物品
       *
       * **path:** /api/item_common/delete/{itemId}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   itemId: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      deleteCommonItem<
        Config extends Alova2MethodConfig<RBoolean> & {
          pathParams: {
            itemId: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'item_common.deleteCommonItem', Config>;
    };
    item: {
      /**
       * ---
       *
       * [PUT] 复制物品到地区
       *
       * **path:** /api/item/copy/{areaId}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   areaId: number
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = number[]
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [items] start
       *   // [items] end
       *   data?: number[]
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      copyItemToArea<
        Config extends Alova2MethodConfig<RListLong> & {
          pathParams: {
            areaId: number;
          };
          data: number[];
        }
      >(
        config: Config
      ): Alova2Method<RListLong, 'item.copyItemToArea', Config>;
      /**
       * ---
       *
       * [PUT] 新增物品
       *
       * **path:** /api/item/add
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 乐观锁
       *   version?: number
       *   // [title] ID
       *   id?: number
       *   // [title] 创建人
       *   creatorId?: number
       *   // [title] 创建时间
       *   createTime?: string
       *   // [title] 更新人
       *   updaterId?: number
       *   // [title] 更新时间
       *   updateTime?: string
       *   // [title] 物品名称
       *   name?: string
       *   // [title] 地区ID（须确保是末端地区）
       *   areaId?: number
       *   // [title] 默认刷新时间;单位:毫秒
       *   defaultRefreshTime?: number
       *   // [title] 默认描述模板;用于提交新物品点位时的描述模板
       *   defaultContent?: string
       *   // [title] 默认数量
       *   defaultCount?: number
       *   // [title] 图标标签
       *   iconTag?: string
       *   // [title] 图标样式类型
       *   iconStyleType?: number
       *   // [title] 隐藏标志
       *   hiddenFlag?: number
       *   // [title] 物品排序
       *   sortIndex?: number
       *   // [title] 特殊物品标记;二进制表示；低位第一位：前台是否显示
       *   specialFlag?: number
       *   // [title] 物品类型ID列表
       *   // [items] start
       *   // [title] 物品类型ID列表
       *   // [items] end
       *   typeIdList?: number[]
       *   // [title] 查询条件下物品总数
       *   count?: number
       *   // [title] 物品总数区分
       *   countSplit?: Record<string, number>
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: number
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      createItem<
        Config extends Alova2MethodConfig<RLong> & {
          data: ItemVo;
        }
      >(
        config: Config
      ): Alova2Method<RLong, 'item.createItem', Config>;
      /**
       * ---
       *
       * [POST] 修改物品
       *
       * **path:** /api/item/update/{editSame}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   editSame: number
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = Array<{
       *   // [title] 乐观锁
       *   version?: number
       *   // [title] ID
       *   id?: number
       *   // [title] 创建人
       *   creatorId?: number
       *   // [title] 创建时间
       *   createTime?: string
       *   // [title] 更新人
       *   updaterId?: number
       *   // [title] 更新时间
       *   updateTime?: string
       *   // [title] 物品名称
       *   name?: string
       *   // [title] 地区ID（须确保是末端地区）
       *   areaId?: number
       *   // [title] 默认刷新时间;单位:毫秒
       *   defaultRefreshTime?: number
       *   // [title] 默认描述模板;用于提交新物品点位时的描述模板
       *   defaultContent?: string
       *   // [title] 默认数量
       *   defaultCount?: number
       *   // [title] 图标标签
       *   iconTag?: string
       *   // [title] 图标样式类型
       *   iconStyleType?: number
       *   // [title] 隐藏标志
       *   hiddenFlag?: number
       *   // [title] 物品排序
       *   sortIndex?: number
       *   // [title] 特殊物品标记;二进制表示；低位第一位：前台是否显示
       *   specialFlag?: number
       *   // [title] 物品类型ID列表
       *   // [items] start
       *   // [title] 物品类型ID列表
       *   // [items] end
       *   typeIdList?: number[]
       *   // [title] 查询条件下物品总数
       *   count?: number
       *   // [title] 物品总数区分
       *   countSplit?: Record<string, number>
       * }>
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      updateItem<
        Config extends Alova2MethodConfig<RBoolean> & {
          pathParams: {
            editSame: number;
          };
          data: ItemVo[];
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'item.updateItem', Config>;
      /**
       * ---
       *
       * [POST] 将物品加入某一类型
       *
       * **path:** /api/item/join/{typeId}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   typeId: number
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = number[]
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      joinItemsInType<
        Config extends Alova2MethodConfig<RBoolean> & {
          pathParams: {
            typeId: number;
          };
          data: number[];
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'item.joinItemsInType', Config>;
      /**
       * ---
       *
       * [POST] 根据筛选条件列出物品信息
       *
       * **path:** /api/item/get/list
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 末端物品类型ID列表
       *   // [items] start
       *   // [title] 末端物品类型ID列表
       *   // [items] end
       *   typeIdList?: number[]
       *   // [title] 末端地区ID列表
       *   // [items] start
       *   // [title] 末端地区ID列表
       *   // [items] end
       *   areaIdList?: number[]
       *   // [title] 物品名
       *   name?: string
       *   // [title] 当前页，从1开始
       *   current?: number
       *   // [title] 每页大小，默认为10
       *   size?: number
       *   // [title] 排序条件
       *   // [items] start
       *   // [title] 排序条件
       *   // [items] end
       *   sort?: string[]
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [title] 分页记录前端封装
       *   // 分页记录前端封装
       *   data?: {
       *     // [items] start
       *     // [title] Item前端封装
       *     // 物品表前端封装
       *     // [items] end
       *     record?: Array<{
       *       // [title] 乐观锁
       *       version?: number
       *       // [title] ID
       *       id?: number
       *       // [title] 创建人
       *       creatorId?: number
       *       // [title] 创建时间
       *       createTime?: string
       *       // [title] 更新人
       *       updaterId?: number
       *       // [title] 更新时间
       *       updateTime?: string
       *       // [title] 物品名称
       *       name?: string
       *       // [title] 地区ID（须确保是末端地区）
       *       areaId?: number
       *       // [title] 默认刷新时间;单位:毫秒
       *       defaultRefreshTime?: number
       *       // [title] 默认描述模板;用于提交新物品点位时的描述模板
       *       defaultContent?: string
       *       // [title] 默认数量
       *       defaultCount?: number
       *       // [title] 图标标签
       *       iconTag?: string
       *       // [title] 图标样式类型
       *       iconStyleType?: number
       *       // [title] 隐藏标志
       *       hiddenFlag?: number
       *       // [title] 物品排序
       *       sortIndex?: number
       *       // [title] 特殊物品标记;二进制表示；低位第一位：前台是否显示
       *       specialFlag?: number
       *       // [title] 物品类型ID列表
       *       // [items] start
       *       // [title] 物品类型ID列表
       *       // [items] end
       *       typeIdList?: number[]
       *       // [title] 查询条件下物品总数
       *       count?: number
       *       // [title] 物品总数区分
       *       countSplit?: Record<string, number>
       *     }>
       *     total?: number
       *     size?: number
       *   }
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      listItemIdByType<
        Config extends Alova2MethodConfig<RPageListVoItemVo> & {
          data: ItemSearchVo;
        }
      >(
        config: Config
      ): Alova2Method<RPageListVoItemVo, 'item.listItemIdByType', Config>;
      /**
       * ---
       *
       * [POST] 根据物品ID查询物品
       *
       * **path:** /api/item/get/list_byid
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = number[]
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [items] start
       *   // [title] Item前端封装
       *   // 物品表前端封装
       *   // [items] end
       *   data?: Array<{
       *     // [title] 乐观锁
       *     version?: number
       *     // [title] ID
       *     id?: number
       *     // [title] 创建人
       *     creatorId?: number
       *     // [title] 创建时间
       *     createTime?: string
       *     // [title] 更新人
       *     updaterId?: number
       *     // [title] 更新时间
       *     updateTime?: string
       *     // [title] 物品名称
       *     name?: string
       *     // [title] 地区ID（须确保是末端地区）
       *     areaId?: number
       *     // [title] 默认刷新时间;单位:毫秒
       *     defaultRefreshTime?: number
       *     // [title] 默认描述模板;用于提交新物品点位时的描述模板
       *     defaultContent?: string
       *     // [title] 默认数量
       *     defaultCount?: number
       *     // [title] 图标标签
       *     iconTag?: string
       *     // [title] 图标样式类型
       *     iconStyleType?: number
       *     // [title] 隐藏标志
       *     hiddenFlag?: number
       *     // [title] 物品排序
       *     sortIndex?: number
       *     // [title] 特殊物品标记;二进制表示；低位第一位：前台是否显示
       *     specialFlag?: number
       *     // [title] 物品类型ID列表
       *     // [items] start
       *     // [title] 物品类型ID列表
       *     // [items] end
       *     typeIdList?: number[]
       *     // [title] 查询条件下物品总数
       *     count?: number
       *     // [title] 物品总数区分
       *     countSplit?: Record<string, number>
       *   }>
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      listItemById<
        Config extends Alova2MethodConfig<RListItemVo> & {
          data: number[];
        }
      >(
        config: Config
      ): Alova2Method<RListItemVo, 'item.listItemById', Config>;
      /**
       * ---
       *
       * [DELETE] 删除物品
       *
       * **path:** /api/item/delete/{itemId}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   itemId: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      deleteItem<
        Config extends Alova2MethodConfig<RBoolean> & {
          pathParams: {
            itemId: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'item.deleteItem', Config>;
    };
    icon_type: {
      /**
       * ---
       *
       * [PUT] 新增分类
       *
       * **path:** /api/icon_type/add
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 乐观锁
       *   version?: number
       *   // [title] ID
       *   id?: number
       *   // [title] 创建人
       *   creatorId?: number
       *   // [title] 创建时间
       *   createTime?: string
       *   // [title] 更新人
       *   updaterId?: number
       *   // [title] 更新时间
       *   updateTime?: string
       *   // [title] 分类名
       *   name?: string
       *   // [title] 父级分类ID（-1为根分类）
       *   parentId?: number
       *   // [title] 是否为末端类型
       *   isFinal?: boolean
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: number
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      addIconType<
        Config extends Alova2MethodConfig<RLong> & {
          data: IconTypeVo;
        }
      >(
        config: Config
      ): Alova2Method<RLong, 'icon_type.addIconType', Config>;
      /**
       * ---
       *
       * [POST] 修改分类
       *
       * **path:** /api/icon_type/update
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 乐观锁
       *   version?: number
       *   // [title] ID
       *   id?: number
       *   // [title] 创建人
       *   creatorId?: number
       *   // [title] 创建时间
       *   createTime?: string
       *   // [title] 更新人
       *   updaterId?: number
       *   // [title] 更新时间
       *   updateTime?: string
       *   // [title] 分类名
       *   name?: string
       *   // [title] 父级分类ID（-1为根分类）
       *   parentId?: number
       *   // [title] 是否为末端类型
       *   isFinal?: boolean
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      updateIconType<
        Config extends Alova2MethodConfig<RBoolean> & {
          data: IconTypeVo;
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'icon_type.updateIconType', Config>;
      /**
       * ---
       *
       * [POST] 列出分类
       *
       * **path:** /api/icon_type/get/list
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 当前页，从1开始
       *   current?: number
       *   // [title] 每页大小，默认为10
       *   size?: number
       *   // [title] 父级类型ID列表
       *   // [items] start
       *   // [title] 父级类型ID列表
       *   // [items] end
       *   typeIdList?: number[]
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [title] 分页记录前端封装
       *   // 分页记录前端封装
       *   data?: {
       *     // [items] start
       *     // [title] IconType前端封装
       *     // 图标分类表前端封装
       *     // [items] end
       *     record?: Array<{
       *       // [title] 乐观锁
       *       version?: number
       *       // [title] ID
       *       id?: number
       *       // [title] 创建人
       *       creatorId?: number
       *       // [title] 创建时间
       *       createTime?: string
       *       // [title] 更新人
       *       updaterId?: number
       *       // [title] 更新时间
       *       updateTime?: string
       *       // [title] 分类名
       *       name?: string
       *       // [title] 父级分类ID（-1为根分类）
       *       parentId?: number
       *       // [title] 是否为末端类型
       *       isFinal?: boolean
       *     }>
       *     total?: number
       *     size?: number
       *   }
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      listIconType<
        Config extends Alova2MethodConfig<RPageListVoIconTypeVo> & {
          data: PageAndTypeSearchVo;
        }
      >(
        config: Config
      ): Alova2Method<RPageListVoIconTypeVo, 'icon_type.listIconType', Config>;
      /**
       * ---
       *
       * [DELETE] 删除分类
       *
       * **path:** /api/icon_type/delete/{typeId}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   typeId: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      deleteIconType<
        Config extends Alova2MethodConfig<RBoolean> & {
          pathParams: {
            typeId: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'icon_type.deleteIconType', Config>;
    };
    icon: {
      /**
       * ---
       *
       * [PUT] 新增图标
       *
       * **path:** /api/icon/add
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 乐观锁
       *   version?: number
       *   // [title] ID
       *   id?: number
       *   // [title] 创建人
       *   creatorId?: number
       *   // [title] 创建时间
       *   createTime?: string
       *   // [title] 更新人
       *   updaterId?: number
       *   // [title] 更新时间
       *   updateTime?: string
       *   // [title] 图标名称
       *   name?: string
       *   // [title] 图标类型ID列表
       *   // [items] start
       *   // [title] 图标类型ID列表
       *   // [items] end
       *   typeIdList?: number[]
       *   // [title] 图标url
       *   url?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: number
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      createIcon<
        Config extends Alova2MethodConfig<RLong> & {
          data: IconVo;
        }
      >(
        config: Config
      ): Alova2Method<RLong, 'icon.createIcon', Config>;
      /**
       * ---
       *
       * [POST] 修改图标信息
       *
       * **path:** /api/icon/update
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 乐观锁
       *   version?: number
       *   // [title] ID
       *   id?: number
       *   // [title] 创建人
       *   creatorId?: number
       *   // [title] 创建时间
       *   createTime?: string
       *   // [title] 更新人
       *   updaterId?: number
       *   // [title] 更新时间
       *   updateTime?: string
       *   // [title] 图标名称
       *   name?: string
       *   // [title] 图标类型ID列表
       *   // [items] start
       *   // [title] 图标类型ID列表
       *   // [items] end
       *   typeIdList?: number[]
       *   // [title] 图标url
       *   url?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      updateIcon<
        Config extends Alova2MethodConfig<RBoolean> & {
          data: IconVo;
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'icon.updateIcon', Config>;
      /**
       * ---
       *
       * [POST] 获取单个图标信息
       *
       * **path:** /api/icon/get/single/{iconId}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   iconId: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [title] Icon前端封装
       *   // 图标主表前端封装
       *   data?: {
       *     // [title] 乐观锁
       *     version?: number
       *     // [title] ID
       *     id?: number
       *     // [title] 创建人
       *     creatorId?: number
       *     // [title] 创建时间
       *     createTime?: string
       *     // [title] 更新人
       *     updaterId?: number
       *     // [title] 更新时间
       *     updateTime?: string
       *     // [title] 图标名称
       *     name?: string
       *     // [title] 图标类型ID列表
       *     // [items] start
       *     // [title] 图标类型ID列表
       *     // [items] end
       *     typeIdList?: number[]
       *     // [title] 图标url
       *     url?: string
       *   }
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      getIcon<
        Config extends Alova2MethodConfig<RIconVo> & {
          pathParams: {
            iconId: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<RIconVo, 'icon.getIcon', Config>;
      /**
       * ---
       *
       * [POST] 列出图标
       *
       * **path:** /api/icon/get/list
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 乐观锁：修改次数
       *   version?: number
       *   // [title] 图标ID列表
       *   // [items] start
       *   // [title] 图标ID列表
       *   // [items] end
       *   iconIdList?: number[]
       *   // [title] 创建者ID
       *   creator?: number
       *   // [title] 图标分类列表
       *   // [items] start
       *   // [title] 图标分类列表
       *   // [items] end
       *   typeIdList?: number[]
       *   // [title] 图标名
       *   name?: string
       *   // [title] 当前页，从1开始
       *   current?: number
       *   // [title] 每页大小，默认为10
       *   size?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [title] 分页记录前端封装
       *   // 分页记录前端封装
       *   data?: {
       *     // [items] start
       *     // [title] Icon前端封装
       *     // 图标主表前端封装
       *     // [items] end
       *     record?: Array<{
       *       // [title] 乐观锁
       *       version?: number
       *       // [title] ID
       *       id?: number
       *       // [title] 创建人
       *       creatorId?: number
       *       // [title] 创建时间
       *       createTime?: string
       *       // [title] 更新人
       *       updaterId?: number
       *       // [title] 更新时间
       *       updateTime?: string
       *       // [title] 图标名称
       *       name?: string
       *       // [title] 图标类型ID列表
       *       // [items] start
       *       // [title] 图标类型ID列表
       *       // [items] end
       *       typeIdList?: number[]
       *       // [title] 图标url
       *       url?: string
       *     }>
       *     total?: number
       *     size?: number
       *   }
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      listIcon<
        Config extends Alova2MethodConfig<RPageListVoIconVo> & {
          data: IconSearchVo;
        }
      >(
        config: Config
      ): Alova2Method<RPageListVoIconVo, 'icon.listIcon', Config>;
      /**
       * ---
       *
       * [DELETE] 删除图标
       *
       * **path:** /api/icon/delete/{iconId}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   iconId: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      deleteIcon<
        Config extends Alova2MethodConfig<RBoolean> & {
          pathParams: {
            iconId: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'icon.deleteIcon', Config>;
    };
    area: {
      /**
       * ---
       *
       * [PUT] 新增地区
       *
       * **path:** /api/area/add
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 乐观锁
       *   version?: number
       *   // [title] ID
       *   id?: number
       *   // [title] 创建人
       *   creatorId?: number
       *   // [title] 创建时间
       *   createTime?: string
       *   // [title] 更新人
       *   updaterId?: number
       *   // [title] 更新时间
       *   updateTime?: string
       *   // [title] 地区名称
       *   name?: string
       *   // [title] 地区代码
       *   code?: string
       *   // [title] 地区说明
       *   content?: string
       *   // [title] 图标标签
       *   iconTag?: string
       *   // [title] 父级地区ID（无父级则为-1）
       *   parentId?: number
       *   // [title] 是否为末端地区
       *   isFinal?: boolean
       *   // [title] 权限屏蔽标记
       *   hiddenFlag?: number
       *   // [title] 额外标记;低位第一位：前台是否显示
       *   specialFlag?: number
       *   // [title] 排序
       *   sortIndex?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: number
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      createArea<
        Config extends Alova2MethodConfig<RLong> & {
          data: AreaVo;
        }
      >(
        config: Config
      ): Alova2Method<RLong, 'area.createArea', Config>;
      /**
       * ---
       *
       * [POST] 修改地区
       *
       * **path:** /api/area/update
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 乐观锁
       *   version?: number
       *   // [title] ID
       *   id?: number
       *   // [title] 创建人
       *   creatorId?: number
       *   // [title] 创建时间
       *   createTime?: string
       *   // [title] 更新人
       *   updaterId?: number
       *   // [title] 更新时间
       *   updateTime?: string
       *   // [title] 地区名称
       *   name?: string
       *   // [title] 地区代码
       *   code?: string
       *   // [title] 地区说明
       *   content?: string
       *   // [title] 图标标签
       *   iconTag?: string
       *   // [title] 父级地区ID（无父级则为-1）
       *   parentId?: number
       *   // [title] 是否为末端地区
       *   isFinal?: boolean
       *   // [title] 权限屏蔽标记
       *   hiddenFlag?: number
       *   // [title] 额外标记;低位第一位：前台是否显示
       *   specialFlag?: number
       *   // [title] 排序
       *   sortIndex?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      updateArea<
        Config extends Alova2MethodConfig<RBoolean> & {
          data: AreaVo;
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'area.updateArea', Config>;
      /**
       * ---
       *
       * [POST] 获取单个地区信息
       *
       * **path:** /api/area/get/{areaId}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   areaId: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [title] Area前端封装
       *   // 地区主表前端封装
       *   data?: {
       *     // [title] 乐观锁
       *     version?: number
       *     // [title] ID
       *     id?: number
       *     // [title] 创建人
       *     creatorId?: number
       *     // [title] 创建时间
       *     createTime?: string
       *     // [title] 更新人
       *     updaterId?: number
       *     // [title] 更新时间
       *     updateTime?: string
       *     // [title] 地区名称
       *     name?: string
       *     // [title] 地区代码
       *     code?: string
       *     // [title] 地区说明
       *     content?: string
       *     // [title] 图标标签
       *     iconTag?: string
       *     // [title] 父级地区ID（无父级则为-1）
       *     parentId?: number
       *     // [title] 是否为末端地区
       *     isFinal?: boolean
       *     // [title] 权限屏蔽标记
       *     hiddenFlag?: number
       *     // [title] 额外标记;低位第一位：前台是否显示
       *     specialFlag?: number
       *     // [title] 排序
       *     sortIndex?: number
       *   }
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      getArea<
        Config extends Alova2MethodConfig<RAreaVo> & {
          pathParams: {
            areaId: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<RAreaVo, 'area.getArea', Config>;
      /**
       * ---
       *
       * [POST] 列出地区
       *
       * **path:** /api/area/get/list
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 父级ID
       *   parentId?: number
       *   // [title] 是否遍历子地区
       *   isTraverse?: boolean
       *   // [title] 数据等级(hidden_flag范围)
       *   // [items] start
       *   // [title] 数据等级(hidden_flag范围)
       *   // [items] end
       *   hiddenFlagList?: number[]
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [items] start
       *   // [title] Area前端封装
       *   // 地区主表前端封装
       *   // [items] end
       *   data?: Array<{
       *     // [title] 乐观锁
       *     version?: number
       *     // [title] ID
       *     id?: number
       *     // [title] 创建人
       *     creatorId?: number
       *     // [title] 创建时间
       *     createTime?: string
       *     // [title] 更新人
       *     updaterId?: number
       *     // [title] 更新时间
       *     updateTime?: string
       *     // [title] 地区名称
       *     name?: string
       *     // [title] 地区代码
       *     code?: string
       *     // [title] 地区说明
       *     content?: string
       *     // [title] 图标标签
       *     iconTag?: string
       *     // [title] 父级地区ID（无父级则为-1）
       *     parentId?: number
       *     // [title] 是否为末端地区
       *     isFinal?: boolean
       *     // [title] 权限屏蔽标记
       *     hiddenFlag?: number
       *     // [title] 额外标记;低位第一位：前台是否显示
       *     specialFlag?: number
       *     // [title] 排序
       *     sortIndex?: number
       *   }>
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      listArea<
        Config extends Alova2MethodConfig<RListAreaVo> & {
          data: AreaSearchVo;
        }
      >(
        config: Config
      ): Alova2Method<RListAreaVo, 'area.listArea', Config>;
      /**
       * ---
       *
       * [DELETE] 删除地区
       *
       * **path:** /api/area/{areaId}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   areaId: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      deleteArea<
        Config extends Alova2MethodConfig<RBoolean> & {
          pathParams: {
            areaId: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'area.deleteArea', Config>;
    };
    user: {
      /**
       * ---
       *
       * [POST] 用户信息更新
       *
       * **path:** /system/user/update
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   userId?: number
       *   nickname?: string
       *   qq?: string
       *   phone?: string
       *   logo?: string
       *   roleId?: number
       *   remark?: string
       *   // [items] start
       *   // [items] end
       *   accessPolicy?: string[]
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      updateUser<
        Config extends Alova2MethodConfig<RBoolean> & {
          data: SysUserUpdateVo;
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'user.updateUser', Config>;
      /**
       * ---
       *
       * [POST] 用户密码更新
       *
       * **path:** /system/user/update_password
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   userId?: number
       *   password?: string
       *   oldPassword?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      updateUserPassword<
        Config extends Alova2MethodConfig<RBoolean> & {
          data: SysUserPasswordUpdateVo;
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'user.updateUserPassword', Config>;
      /**
       * ---
       *
       * [POST] 用户密码修改（管理员接口）
       *
       * **path:** /system/user/update_password_by_admin
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   userId?: number
       *   password?: string
       *   oldPassword?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      updateUserPasswordByAdmin<
        Config extends Alova2MethodConfig<RBoolean> & {
          data: SysUserPasswordUpdateVo;
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'user.updateUserPasswordByAdmin', Config>;
      /**
       * ---
       *
       * [POST] 用户注册(管理员权限)
       *
       * **path:** /system/user/register
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   username?: string
       *   password?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: number
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      registerUser<
        Config extends Alova2MethodConfig<RLong> & {
          data: SysUserRegisterVo;
        }
      >(
        config: Config
      ): Alova2Method<RLong, 'user.registerUser', Config>;
      /**
       * ---
       *
       * [POST] qq用户注册
       *
       * **path:** /system/user/register/qq
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   username?: string
       *   password?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: number
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      registerUserByQQ<
        Config extends Alova2MethodConfig<RLong> & {
          data: SysUserRegisterVo;
        }
      >(
        config: Config
      ): Alova2Method<RLong, 'user.registerUserByQQ', Config>;
      /**
       * ---
       *
       * [POST] 用户信息批量查询
       *
       * **path:** /system/user/info/userList
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 当前页，从1开始
       *   current?: number
       *   // [title] 每页大小，默认为10
       *   size?: number
       *   // [title] 用户名
       *   username?: string
       *   // [title] 昵称
       *   nickname?: string
       *   // [title] 角色ID
       *   // [items] start
       *   // [title] 角色ID
       *   // [items] end
       *   roleIds?: string[]
       *   // [title] 排序条件
       *   // [items] start
       *   // [title] 排序条件
       *   // [items] end
       *   sort?: string[]
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [title] 分页记录前端封装
       *   // 分页记录前端封装
       *   data?: {
       *     // [items] start
       *     // [title] SysUser前端封装
       *     // 系统用户表前端封装
       *     // [items] end
       *     record?: Array<{
       *       // [title] 乐观锁
       *       version?: number
       *       // [title] ID
       *       id?: number
       *       // [title] 更新人
       *       updaterId?: number
       *       // [title] 更新时间
       *       updateTime?: string
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 角色ID
       *       roleId?: number
       *       // [title] 备注
       *       remark?: string
       *       // [title] access_policy
       *       // [items] start
       *       // [title] access_policy
       *       // [items] end
       *       accessPolicy?: string[]
       *     }>
       *     total?: number
       *     size?: number
       *   }
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      getUserList<
        Config extends Alova2MethodConfig<RPageListVoSysUserVo> & {
          data: SysUserSearchVo;
        }
      >(
        config: Config
      ): Alova2Method<RPageListVoSysUserVo, 'user.getUserList', Config>;
      /**
       * ---
       *
       * [GET] 用户信息获取
       *
       * **path:** /system/user/info/{userId}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   userId: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [title] SysUser前端封装
       *   // 系统用户表前端封装
       *   data?: {
       *     // [title] 乐观锁
       *     version?: number
       *     // [title] ID
       *     id?: number
       *     // [title] 更新人
       *     updaterId?: number
       *     // [title] 更新时间
       *     updateTime?: string
       *     // [title] 用户名
       *     username?: string
       *     // [title] 昵称
       *     nickname?: string
       *     // [title] QQ
       *     qq?: string
       *     // [title] 手机号
       *     phone?: string
       *     // [title] 头像链接
       *     logo?: string
       *     // [title] 角色ID
       *     roleId?: number
       *     // [title] 备注
       *     remark?: string
       *     // [title] access_policy
       *     // [items] start
       *     // [title] access_policy
       *     // [items] end
       *     accessPolicy?: string[]
       *   }
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      getUserInfo<
        Config extends Alova2MethodConfig<RSysUserVo> & {
          pathParams: {
            userId: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<RSysUserVo, 'user.getUserInfo', Config>;
      /**
       * ---
       *
       * [DELETE] 删除用户
       *
       * **path:** /system/user/{workId}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   workId: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      deleteUser<
        Config extends Alova2MethodConfig<RBoolean> & {
          pathParams: {
            workId: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'user.deleteUser', Config>;
      /**
       * ---
       *
       * [DELETE] 用户踢出
       *
       * **path:** /system/user/kick_out/{workId}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   workId: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      kickOutUser<
        Config extends Alova2MethodConfig<RBoolean> & {
          pathParams: {
            workId: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'user.kickOutUser', Config>;
    };
    invitation: {
      /**
       * ---
       *
       * [POST] 新增/更新用户邀请
       *
       * **path:** /system/invitation/update
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 乐观锁
       *   version?: number
       *   // [title] ID
       *   id?: number
       *   // [title] 创建人
       *   creatorId?: number
       *   // [title] 创建时间
       *   createTime?: string
       *   // [title] 更新人
       *   updaterId?: number
       *   // [title] 更新时间
       *   updateTime?: string
       *   // [title] 邀请码
       *   code?: string
       *   // [title] 用户名
       *   username?: string
       *   // [title] 角色ID
       *   roleId?: number
       *   // [title] 备注
       *   remark?: string
       *   // [title] 权限策略
       *   // [items] start
       *   // [title] 权限策略
       *   // [items] end
       *   accessPolicy?: string[]
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [title] 用户邀请前端封装
       *   // 用户邀请前端封装
       *   data?: {
       *     // [title] 邀请码
       *     code?: string
       *     // [title] 用户名
       *     username?: string
       *   }
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      updateInvitation<
        Config extends Alova2MethodConfig<RSysUserInvitationSmallVo> & {
          data: SysUserInvitationVo;
        }
      >(
        config: Config
      ): Alova2Method<RSysUserInvitationSmallVo, 'invitation.updateInvitation', Config>;
      /**
       * ---
       *
       * [POST] 列出用户邀请
       *
       * **path:** /system/invitation/list
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 当前页，从1开始
       *   current?: number
       *   // [title] 每页大小，默认为10
       *   size?: number
       *   // [title] 邀请码
       *   code?: string
       *   // [title] 用户名
       *   username?: string
       *   // [title] 排序条件
       *   // [items] start
       *   // [title] 排序条件
       *   // [items] end
       *   sort?: string[]
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [title] 分页记录前端封装
       *   // 分页记录前端封装
       *   data?: {
       *     // [items] start
       *     // [title] SysUserInvitation前端封装
       *     // 系统用户邀请表;系统用户邀请前端封装
       *     // [items] end
       *     record?: Array<{
       *       // [title] 乐观锁
       *       version?: number
       *       // [title] ID
       *       id?: number
       *       // [title] 创建人
       *       creatorId?: number
       *       // [title] 创建时间
       *       createTime?: string
       *       // [title] 更新人
       *       updaterId?: number
       *       // [title] 更新时间
       *       updateTime?: string
       *       // [title] 邀请码
       *       code?: string
       *       // [title] 用户名
       *       username?: string
       *       // [title] 角色ID
       *       roleId?: number
       *       // [title] 备注
       *       remark?: string
       *       // [title] 权限策略
       *       // [items] start
       *       // [title] 权限策略
       *       // [items] end
       *       accessPolicy?: string[]
       *     }>
       *     total?: number
       *     size?: number
       *   }
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      listInvitation<
        Config extends Alova2MethodConfig<RPageListVoSysUserInvitationVo> & {
          data: SysUserInvitationSearchVo;
        }
      >(
        config: Config
      ): Alova2Method<RPageListVoSysUserInvitationVo, 'invitation.listInvitation', Config>;
      /**
       * ---
       *
       * [POST] 检查用户邀请数据
       *
       * **path:** /system/invitation/info
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 邀请码
       *   code?: string
       *   // [title] 用户名
       *   username?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [title] 用户邀请前端封装
       *   // 用户邀请前端封装
       *   data?: {
       *     // [title] 邀请码
       *     code?: string
       *     // [title] 用户名
       *     username?: string
       *   }
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      checkInvitation<
        Config extends Alova2MethodConfig<RSysUserInvitationSmallVo> & {
          data: SysUserInvitationSmallVo;
        }
      >(
        config: Config
      ): Alova2Method<RSysUserInvitationSmallVo, 'invitation.checkInvitation', Config>;
      /**
       * ---
       *
       * [POST] 检查用户邀请数据
       *
       * **path:** /system/invitation/consume
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 邀请码
       *   code?: string
       *   // [title] 用户名
       *   username?: string
       *   // [title] 密码
       *   password?: string
       *   // [title] 昵称
       *   nickname?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [title] 用户邀请消费结果数据封装
       *   // 用户邀请消费结果数据封装
       *   data?: {
       *     // [title] 用户ID
       *     userId?: number
       *     // [title] 条件结果
       *     result?: 'EXISTING' | 'SUCCESS'
       *   }
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      consumeInvitation<
        Config extends Alova2MethodConfig<RSysUserInvitationConsumeResultVo> & {
          data: SysUserInvitationConsumeVo;
        }
      >(
        config: Config
      ): Alova2Method<RSysUserInvitationConsumeResultVo, 'invitation.consumeInvitation', Config>;
      /**
       * ---
       *
       * [DELETE] 删除用户邀请
       *
       * **path:** /system/invitation/{invitationId}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   invitationId: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      deleteInvitation<
        Config extends Alova2MethodConfig<RBoolean> & {
          pathParams: {
            invitationId: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'invitation.deleteInvitation', Config>;
    };
    device: {
      /**
       * ---
       *
       * [POST] 更新用户设备信息
       *
       * **path:** /system/device/update
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 乐观锁
       *   version?: number
       *   // [title] ID
       *   id?: number
       *   // [title] 创建人
       *   creatorId?: number
       *   // [title] 创建时间
       *   createTime?: string
       *   // [title] 更新人
       *   updaterId?: number
       *   // [title] 更新时间
       *   updateTime?: string
       *   // [title] 用户ID
       *   userId?: number
       *   // [title] 设备编码
       *   deviceId?: string
       *   // [title] IPv4
       *   ipv4?: string
       *   // [title] IP地区信息
       *   ipRegion?: {
       *     // [title] 国家
       *     country?: string
       *     // [title] 地区
       *     region?: string
       *     // [title] 省/州
       *     province?: string
       *     // [title] 城市
       *     city?: string
       *     // [title] 网络运营商
       *     isp?: string
       *     fullRegion?: string
       *     // [title] 是否是未知地区
       *     isUnknown?: boolean
       *   }
       *   // [title] 设备状态
       *   status?: '0' | '1' | '2'
       *   // [title] 上次登录时间
       *   lastLoginTime?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      updateDevice<
        Config extends Alova2MethodConfig<RBoolean> & {
          data: SysUserDeviceVo;
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'device.updateDevice', Config>;
      /**
       * ---
       *
       * [POST] 查询用户设备列表
       *
       * **path:** /system/device/list
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 当前页，从1开始
       *   current?: number
       *   // [title] 每页大小，默认为10
       *   size?: number
       *   // [title] 用户ID
       *   userId?: number
       *   // [title] IPv4
       *   ipv4?: string
       *   // [title] 设备ID
       *   deviceId?: string
       *   // [title] 设备状态
       *   status?: number
       *   // [title] 排序条件
       *   // [items] start
       *   // [title] 排序条件
       *   // [items] end
       *   sort?: string[]
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [title] 分页记录前端封装
       *   // 分页记录前端封装
       *   data?: {
       *     // [items] start
       *     // [title] SysUserDevice前端封装
       *     // 用户设备表;用户设备前端封装
       *     // [items] end
       *     record?: Array<{
       *       // [title] 乐观锁
       *       version?: number
       *       // [title] ID
       *       id?: number
       *       // [title] 创建人
       *       creatorId?: number
       *       // [title] 创建时间
       *       createTime?: string
       *       // [title] 更新人
       *       updaterId?: number
       *       // [title] 更新时间
       *       updateTime?: string
       *       // [title] 用户ID
       *       userId?: number
       *       // [title] 设备编码
       *       deviceId?: string
       *       // [title] IPv4
       *       ipv4?: string
       *       // [title] IP地区信息
       *       ipRegion?: {
       *         // [title] 国家
       *         country?: string
       *         // [title] 地区
       *         region?: string
       *         // [title] 省/州
       *         province?: string
       *         // [title] 城市
       *         city?: string
       *         // [title] 网络运营商
       *         isp?: string
       *         fullRegion?: string
       *         // [title] 是否是未知地区
       *         isUnknown?: boolean
       *       }
       *       // [title] 设备状态
       *       status?: '0' | '1' | '2'
       *       // [title] 上次登录时间
       *       lastLoginTime?: string
       *     }>
       *     total?: number
       *     size?: number
       *   }
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      searchPage<
        Config extends Alova2MethodConfig<RPageListVoSysUserDeviceVo> & {
          data: SysUserDeviceSearchVo;
        }
      >(
        config: Config
      ): Alova2Method<RPageListVoSysUserDeviceVo, 'device.searchPage', Config>;
    };
    action_log: {
      /**
       * ---
       *
       * [POST] 操作日志分页
       *
       * **path:** /system/action_log/list
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 当前页，从0开始
       *   current?: number
       *   // [title] 每页大小，默认为10
       *   size?: number
       *   // [title] 用户ID
       *   userId?: number
       *   // [title] IPv4
       *   ipv4?: string
       *   // [title] 设备ID
       *   deviceId?: string
       *   // [title] 操作名
       *   action?: string
       *   // [title] 是否是错误
       *   isError?: boolean
       *   // [title] 排序条件
       *   // [items] start
       *   // [title] 排序条件
       *   // [items] end
       *   sort?: string[]
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [title] 分页记录前端封装
       *   // 分页记录前端封装
       *   data?: {
       *     // [items] start
       *     // [title] SysActionLog前端封装
       *     // 系统操作日志表;系统操作日志前端封装
       *     // [items] end
       *     record?: Array<{
       *       // [title] 乐观锁
       *       version?: number
       *       // [title] ID
       *       id?: number
       *       // [title] 创建人
       *       creatorId?: number
       *       // [title] 创建时间
       *       createTime?: string
       *       // [title] 更新人
       *       updaterId?: number
       *       // [title] 更新时间
       *       updateTime?: string
       *       // [title] 用户ID
       *       userId?: number
       *       // [title] IPv4
       *       ipv4?: string
       *       // [title] 设备编码
       *       deviceId?: string
       *       // [title] 操作名
       *       action?: string
       *       // [title] 是否是错误
       *       isError?: boolean
       *       // [title] 附加信息
       *       extraData?: Record<string, object>
       *     }>
       *     total?: number
       *     size?: number
       *   }
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      searchActionLog<
        Config extends Alova2MethodConfig<RPageListVoSysActionLogVo> & {
          data: SysActionLogSearchVo;
        }
      >(
        config: Config
      ): Alova2Method<RPageListVoSysActionLogVo, 'action_log.searchActionLog', Config>;
    };
    score: {
      /**
       * ---
       *
       * [POST] 生成评分
       *
       * **path:** /api/score/generate
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 统计范围
       *   scope?: string
       *   // [title] 开始时间
       *   startTime?: string
       *   // [title] 结束时间
       *   endTime?: string
       *   // [title] 统计颗粒度
       *   span?: 'DAY'
       *   generatorId?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: object
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      generate<
        Config extends Alova2MethodConfig<RObject> & {
          data: ScoreParamsVo;
        }
      >(
        config: Config
      ): Alova2Method<RObject, 'score.generate', Config>;
      /**
       * ---
       *
       * [POST] 获取评分
       *
       * **path:** /api/score/data
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 统计范围
       *   scope?: string
       *   // [title] 开始时间
       *   startTime?: string
       *   // [title] 结束时间
       *   endTime?: string
       *   // [title] 统计颗粒度
       *   span?: 'DAY'
       *   generatorId?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: object
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      getData<
        Config extends Alova2MethodConfig<RObject> & {
          data: ScoreParamsVo;
        }
      >(
        config: Config
      ): Alova2Method<RObject, 'score.getData', Config>;
    };
    punctuate_audit: {
      /**
       * ---
       *
       * [POST] 驳回点位审核
       *
       * **path:** /api/punctuate_audit/reject/{punctuateId}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   punctuateId: number
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = string
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      rejectPunctuate<
        Config extends Alova2MethodConfig<RBoolean> & {
          pathParams: {
            punctuateId: number;
          };
          data: string;
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'punctuate_audit.rejectPunctuate', Config>;
      /**
       * ---
       *
       * [POST] 通过点位审核
       *
       * **path:** /api/punctuate_audit/pass/{punctuateId}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   punctuateId: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: number
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      passPunctuate<
        Config extends Alova2MethodConfig<RLong> & {
          pathParams: {
            punctuateId: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<RLong, 'punctuate_audit.passPunctuate', Config>;
      /**
       * ---
       *
       * [POST] 分页查询所有打点信息（包括暂存）
       *
       * **path:** /api/punctuate_audit/get/page/all
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 当前页，从1开始
       *   current?: number
       *   // [title] 每页大小，默认为10
       *   size?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [title] 分页记录前端封装
       *   // 分页记录前端封装
       *   data?: {
       *     // [items] start
       *     // [title] MarkerPunctuate前端封装
       *     // 点位提交表前端封装
       *     // [items] end
       *     record?: Array<{
       *       // [title] 乐观锁
       *       version?: number
       *       // [title] ID
       *       id?: number
       *       // [title] 创建人
       *       creatorId?: number
       *       // [title] 创建时间
       *       createTime?: string
       *       // [title] 更新人
       *       updaterId?: number
       *       // [title] 更新时间
       *       updateTime?: string
       *       // [title] 点位提交ID
       *       punctuateId?: number
       *       // [title] 原有点位ID
       *       originalMarkerId?: number
       *       // [title] 点位名称
       *       markerTitle?: string
       *       // [title] 点位物品列表
       *       itemList?: string
       *       // [title] 点位坐标
       *       position?: string
       *       // [title] 点位说明
       *       content?: string
       *       // [title] 额外特殊字段
       *       extra?: Record<string, object>
       *       // [title] 点位图片
       *       picture?: string
       *       // [title] 点位初始标记者
       *       markerCreatorId?: number
       *       // [title] 点位图片上传者
       *       pictureCreatorId?: number
       *       // [title] 点位视频
       *       videoPath?: string
       *       // [title] 隐藏标志
       *       hiddenFlag?: number
       *       // [title] 点位提交者ID
       *       author?: number
       *       // [title] 状态;0:暂存 1:审核中 2:不通过
       *       status?: number
       *       // [title] 审核备注
       *       auditRemark?: string
       *       // [title] 操作类型;1: 新增 2: 修改 3: 删除
       *       methodType?: number
       *       // [title] 点位刷新时间
       *       refreshTime?: number
       *     }>
       *     total?: number
       *     size?: number
       *   }
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      listAllPunctuatePage<
        Config extends Alova2MethodConfig<RPageListVoMarkerPunctuateVo> & {
          data: PageSearchVo;
        }
      >(
        config: Config
      ): Alova2Method<RPageListVoMarkerPunctuateVo, 'punctuate_audit.listAllPunctuatePage', Config>;
      /**
       * ---
       *
       * [POST] 根据各种条件筛选打点信息
       *
       * **path:** /api/punctuate_audit/get/list_byinfo
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 乐观锁：修改次数
       *   version?: number
       *   // [title] 地区ID列表
       *   // [items] start
       *   // [title] 地区ID列表
       *   // [items] end
       *   areaIdList?: number[]
       *   // [title] 物品ID列表
       *   // [items] start
       *   // [title] 物品ID列表
       *   // [items] end
       *   itemIdList?: number[]
       *   // [title] 类型ID列表
       *   // [items] start
       *   // [title] 类型ID列表
       *   // [items] end
       *   typeIdList?: number[]
       *   // [title] 提交者ID列表
       *   // [items] start
       *   // [title] 提交者ID列表
       *   // [items] end
       *   authorList?: number[]
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [items] start
       *   // [title] MarkerPunctuate前端封装
       *   // 点位提交表前端封装
       *   // [items] end
       *   data?: Array<{
       *     // [title] 乐观锁
       *     version?: number
       *     // [title] ID
       *     id?: number
       *     // [title] 创建人
       *     creatorId?: number
       *     // [title] 创建时间
       *     createTime?: string
       *     // [title] 更新人
       *     updaterId?: number
       *     // [title] 更新时间
       *     updateTime?: string
       *     // [title] 点位提交ID
       *     punctuateId?: number
       *     // [title] 原有点位ID
       *     originalMarkerId?: number
       *     // [title] 点位名称
       *     markerTitle?: string
       *     // [title] 点位物品列表
       *     itemList?: string
       *     // [title] 点位坐标
       *     position?: string
       *     // [title] 点位说明
       *     content?: string
       *     // [title] 额外特殊字段
       *     extra?: Record<string, object>
       *     // [title] 点位图片
       *     picture?: string
       *     // [title] 点位初始标记者
       *     markerCreatorId?: number
       *     // [title] 点位图片上传者
       *     pictureCreatorId?: number
       *     // [title] 点位视频
       *     videoPath?: string
       *     // [title] 隐藏标志
       *     hiddenFlag?: number
       *     // [title] 点位提交者ID
       *     author?: number
       *     // [title] 状态;0:暂存 1:审核中 2:不通过
       *     status?: number
       *     // [title] 审核备注
       *     auditRemark?: string
       *     // [title] 操作类型;1: 新增 2: 修改 3: 删除
       *     methodType?: number
       *     // [title] 点位刷新时间
       *     refreshTime?: number
       *   }>
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      searchPunctuate<
        Config extends Alova2MethodConfig<RListMarkerPunctuateVo> & {
          data: PunctuateSearchVo;
        }
      >(
        config: Config
      ): Alova2Method<RListMarkerPunctuateVo, 'punctuate_audit.searchPunctuate', Config>;
      /**
       * ---
       *
       * [POST] 通过打点ID列表查询打点信息
       *
       * **path:** /api/punctuate_audit/get/list_byid
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = number[]
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [items] start
       *   // [title] MarkerPunctuate前端封装
       *   // 点位提交表前端封装
       *   // [items] end
       *   data?: Array<{
       *     // [title] 乐观锁
       *     version?: number
       *     // [title] ID
       *     id?: number
       *     // [title] 创建人
       *     creatorId?: number
       *     // [title] 创建时间
       *     createTime?: string
       *     // [title] 更新人
       *     updaterId?: number
       *     // [title] 更新时间
       *     updateTime?: string
       *     // [title] 点位提交ID
       *     punctuateId?: number
       *     // [title] 原有点位ID
       *     originalMarkerId?: number
       *     // [title] 点位名称
       *     markerTitle?: string
       *     // [title] 点位物品列表
       *     itemList?: string
       *     // [title] 点位坐标
       *     position?: string
       *     // [title] 点位说明
       *     content?: string
       *     // [title] 额外特殊字段
       *     extra?: Record<string, object>
       *     // [title] 点位图片
       *     picture?: string
       *     // [title] 点位初始标记者
       *     markerCreatorId?: number
       *     // [title] 点位图片上传者
       *     pictureCreatorId?: number
       *     // [title] 点位视频
       *     videoPath?: string
       *     // [title] 隐藏标志
       *     hiddenFlag?: number
       *     // [title] 点位提交者ID
       *     author?: number
       *     // [title] 状态;0:暂存 1:审核中 2:不通过
       *     status?: number
       *     // [title] 审核备注
       *     auditRemark?: string
       *     // [title] 操作类型;1: 新增 2: 修改 3: 删除
       *     methodType?: number
       *     // [title] 点位刷新时间
       *     refreshTime?: number
       *   }>
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      listPunctuateById<
        Config extends Alova2MethodConfig<RListMarkerPunctuateVo> & {
          data: number[];
        }
      >(
        config: Config
      ): Alova2Method<RListMarkerPunctuateVo, 'punctuate_audit.listPunctuateById', Config>;
      /**
       * ---
       *
       * [POST] 根据各种条件筛选打点ID
       *
       * **path:** /api/punctuate_audit/get/id
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 乐观锁：修改次数
       *   version?: number
       *   // [title] 地区ID列表
       *   // [items] start
       *   // [title] 地区ID列表
       *   // [items] end
       *   areaIdList?: number[]
       *   // [title] 物品ID列表
       *   // [items] start
       *   // [title] 物品ID列表
       *   // [items] end
       *   itemIdList?: number[]
       *   // [title] 类型ID列表
       *   // [items] start
       *   // [title] 类型ID列表
       *   // [items] end
       *   typeIdList?: number[]
       *   // [title] 提交者ID列表
       *   // [items] start
       *   // [title] 提交者ID列表
       *   // [items] end
       *   authorList?: number[]
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [items] start
       *   // [items] end
       *   data?: number[]
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      searchPunctuateId<
        Config extends Alova2MethodConfig<RListLong> & {
          data: PunctuateSearchVo;
        }
      >(
        config: Config
      ): Alova2Method<RListLong, 'punctuate_audit.searchPunctuateId', Config>;
      /**
       * ---
       *
       * [DELETE] 删除提交点位
       *
       * **path:** /api/punctuate_audit/delete/{punctuateId}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   punctuateId: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      deletePunctuate<
        Config extends Alova2MethodConfig<RBoolean> & {
          pathParams: {
            punctuateId: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'punctuate_audit.deletePunctuate', Config>;
    };
    marker_link: {
      /**
       * ---
       *
       * [POST] 关联点位
       *
       * **path:** /api/marker_link/link
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = Array<{
       *   // [title] 乐观锁
       *   version?: number
       *   // [title] ID
       *   id?: number
       *   // [title] 更新人
       *   updaterId?: number
       *   // [title] 更新时间
       *   updateTime?: string
       *   // [title] 组ID
       *   groupId?: string
       *   // [title] 起始点点位ID;会根据是否反向与 to_id 交换
       *   fromId?: number
       *   // [title] 终止点点位ID;会根据是否反向与 from_id 交换
       *   toId?: number
       *   // [title] 关联操作类型
       *   linkAction?: string
       *   // [title] 是否反向
       *   linkReverse?: boolean
       *   // [title] 路线
       *   // [items] start
       *   // [title] 点位关联路径线段前端封装
       *   // [items] end
       *   path?: Array<{
       *     // [title] 起始点位ID
       *     // 输出时会转换为 X1 & Y1
       *     id1?: number
       *     // [title] 起始位置X坐标
       *     x1?: number
       *     // [title] 起始位置Y坐标
       *     y1?: number
       *     // [title] 起始曲线句柄X坐标
       *     // 起始位置的三次贝塞尔曲线句柄X坐标
       *     handleX1?: number
       *     // [title] 起始曲线句柄Y坐标
       *     // 起始位置的三次贝塞尔曲线句柄Y坐标
       *     handleY1?: number
       *     // [title] 起点箭头形状
       *     arrowType1?: 'NONE' | 'ARROW' | 'CIRCLE' | 'DOT'
       *     // [title] 终止点位ID
       *     // 输出时会转换为 X2 & Y2
       *     id2?: number
       *     // [title] 终止位置X坐标
       *     x2?: number
       *     // [title] 终止位置Y坐标
       *     y2?: number
       *     // [title] 终止曲线句柄X坐标
       *     // 终止位置的三次贝塞尔曲线句柄X坐标
       *     handleX2?: number
       *     // [title] 终止曲线句柄Y坐标
       *     // 终止位置的三次贝塞尔曲线句柄Y坐标
       *     handleY2?: number
       *     // [title] 终点箭头形状
       *     arrowType2?: 'NONE' | 'ARROW' | 'CIRCLE' | 'DOT'
       *     // [title] 线条样式
       *     lineType?: 'SOLID' | 'DASHED' | 'DOTTED'
       *   }>
       *   // [title] 额外数据
       *   extra?: Record<string, object>
       * }>
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: string
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      linkMarker<
        Config extends Alova2MethodConfig<RString> & {
          data: MarkerLinkageVo[];
        }
      >(
        config: Config
      ): Alova2Method<RString, 'marker_link.linkMarker', Config>;
      /**
       * ---
       *
       * [POST] 关联点位列表
       *
       * **path:** /api/marker_link/get/list
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [items] start
       *   // [items] end
       *   groupIds?: string[]
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: Record<
       *     string,
       *     Array<{
       *       // [title] 乐观锁
       *       version?: number
       *       // [title] ID
       *       id?: number
       *       // [title] 更新人
       *       updaterId?: number
       *       // [title] 更新时间
       *       updateTime?: string
       *       // [title] 组ID
       *       groupId?: string
       *       // [title] 起始点点位ID;会根据是否反向与 to_id 交换
       *       fromId?: number
       *       // [title] 终止点点位ID;会根据是否反向与 from_id 交换
       *       toId?: number
       *       // [title] 关联操作类型
       *       linkAction?: string
       *       // [title] 是否反向
       *       linkReverse?: boolean
       *       // [title] 路线
       *       // [items] start
       *       // [title] 点位关联路径线段前端封装
       *       // [items] end
       *       path?: Array<{
       *         // [title] 起始点位ID
       *         // 输出时会转换为 X1 & Y1
       *         id1?: number
       *         // [title] 起始位置X坐标
       *         x1?: number
       *         // [title] 起始位置Y坐标
       *         y1?: number
       *         // [title] 起始曲线句柄X坐标
       *         // 起始位置的三次贝塞尔曲线句柄X坐标
       *         handleX1?: number
       *         // [title] 起始曲线句柄Y坐标
       *         // 起始位置的三次贝塞尔曲线句柄Y坐标
       *         handleY1?: number
       *         // [title] 起点箭头形状
       *         arrowType1?: 'NONE' | 'ARROW' | 'CIRCLE' | 'DOT'
       *         // [title] 终止点位ID
       *         // 输出时会转换为 X2 & Y2
       *         id2?: number
       *         // [title] 终止位置X坐标
       *         x2?: number
       *         // [title] 终止位置Y坐标
       *         y2?: number
       *         // [title] 终止曲线句柄X坐标
       *         // 终止位置的三次贝塞尔曲线句柄X坐标
       *         handleX2?: number
       *         // [title] 终止曲线句柄Y坐标
       *         // 终止位置的三次贝塞尔曲线句柄Y坐标
       *         handleY2?: number
       *         // [title] 终点箭头形状
       *         arrowType2?: 'NONE' | 'ARROW' | 'CIRCLE' | 'DOT'
       *         // [title] 线条样式
       *         lineType?: 'SOLID' | 'DASHED' | 'DOTTED'
       *       }>
       *       // [title] 额外数据
       *       extra?: Record<string, object>
       *     }>
       *   >
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      getMarkerLinkageList<
        Config extends Alova2MethodConfig<RMapStringListMarkerLinkageVo> & {
          data: MarkerLinkageSearchVo;
        }
      >(
        config: Config
      ): Alova2Method<RMapStringListMarkerLinkageVo, 'marker_link.getMarkerLinkageList', Config>;
      /**
       * ---
       *
       * [POST] 关联点位图数据
       *
       * **path:** /api/marker_link/get/graph
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [items] start
       *   // [items] end
       *   groupIds?: string[]
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: Record<
       *     string,
       *     {
       *       // [title] 点位关联关系
       *       relations?: Record<string, string[]>
       *       // [title] 点位关联关系引用映射
       *       relRefs?: Record<
       *         string,
       *         {
       *           // [title] 关联组类型
       *           type?: string
       *           // [title] 触发关联数据
       *           // [items] start
       *           // [title] 关联引用前端封装
       *           // [items] end
       *           triggers?: Array<{
       *             // [title] 点位ID
       *             markerId?: number
       *             // [title] 起始点位ID
       *             srcId?: number
       *             // [title] 结束点位ID
       *             tarId?: number
       *             // [title] 路线组引用ID
       *             pathRefId?: number
       *           }>
       *           // [title] 目标关联数据
       *           // [items] start
       *           // [title] 关联引用前端封装
       *           // [items] end
       *           targets?: Array<{
       *             // [title] 点位ID
       *             markerId?: number
       *             // [title] 起始点位ID
       *             srcId?: number
       *             // [title] 结束点位ID
       *             tarId?: number
       *             // [title] 路线组引用ID
       *             pathRefId?: number
       *           }>
       *           // [title] 分组关联数据
       *           // [items] start
       *           // [title] 关联引用前端封装
       *           // [items] end
       *           group?: Array<{
       *             // [title] 点位ID
       *             markerId?: number
       *             // [title] 起始点位ID
       *             srcId?: number
       *             // [title] 结束点位ID
       *             tarId?: number
       *             // [title] 路线组引用ID
       *             pathRefId?: number
       *           }>
       *         }
       *       >
       *       // [title] 路线组引用映射
       *       pathRefs?: Record<
       *         string,
       *         Array<{
       *           // [title] 起始点位ID
       *           // 输出时会转换为 X1 & Y1
       *           id1?: number
       *           // [title] 起始位置X坐标
       *           x1?: number
       *           // [title] 起始位置Y坐标
       *           y1?: number
       *           // [title] 起始曲线句柄X坐标
       *           // 起始位置的三次贝塞尔曲线句柄X坐标
       *           handleX1?: number
       *           // [title] 起始曲线句柄Y坐标
       *           // 起始位置的三次贝塞尔曲线句柄Y坐标
       *           handleY1?: number
       *           // [title] 起点箭头形状
       *           arrowType1?: 'NONE' | 'ARROW' | 'CIRCLE' | 'DOT'
       *           // [title] 终止点位ID
       *           // 输出时会转换为 X2 & Y2
       *           id2?: number
       *           // [title] 终止位置X坐标
       *           x2?: number
       *           // [title] 终止位置Y坐标
       *           y2?: number
       *           // [title] 终止曲线句柄X坐标
       *           // 终止位置的三次贝塞尔曲线句柄X坐标
       *           handleX2?: number
       *           // [title] 终止曲线句柄Y坐标
       *           // 终止位置的三次贝塞尔曲线句柄Y坐标
       *           handleY2?: number
       *           // [title] 终点箭头形状
       *           arrowType2?: 'NONE' | 'ARROW' | 'CIRCLE' | 'DOT'
       *           // [title] 线条样式
       *           lineType?: 'SOLID' | 'DASHED' | 'DOTTED'
       *         }>
       *       >
       *     }
       *   >
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      getMarkerLinkageGraph<
        Config extends Alova2MethodConfig<RMapStringGraphVo> & {
          data: MarkerLinkageSearchVo;
        }
      >(
        config: Config
      ): Alova2Method<RMapStringGraphVo, 'marker_link.getMarkerLinkageGraph', Config>;
      /**
       * ---
       *
       * [DELETE] 删除点位关联
       *
       * **path:** /api/marker_link/delete
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [items] start
       *   // [items] end
       *   ids?: number[]
       *   // [items] start
       *   // [items] end
       *   groupIds?: string[]
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: {
       *     // [items] start
       *     // [items] end
       *     groups?: string[]
       *     // [items] start
       *     // [items] end
       *     markers?: number[]
       *   }
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      deleteMarkerLinkage<
        Config extends Alova2MethodConfig<RLinkDeleteVo> & {
          data: LinkDeleteQueryVo;
        }
      >(
        config: Config
      ): Alova2Method<RLinkDeleteVo, 'marker_link.deleteMarkerLinkage', Config>;
    };
    history: {
      /**
       * ---
       *
       * [POST] 历史记录分页
       *
       * **path:** /api/history/get/list
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] 当前页，从1开始
       *   current?: number
       *   // [title] 每页大小，默认为10
       *   size?: number
       *   // [title] 记录类型
       *   type?: number
       *   // [title] 类型ID(配合记录类型使用)
       *   // [items] start
       *   // [title] 类型ID(配合记录类型使用)
       *   // [items] end
       *   id?: number[]
       *   // [title] 操作数据类型
       *   editType?: '0' | '1' | '2' | '3' | '10'
       *   // [title] 创建人ID
       *   creatorId?: number
       *   // [title] 创建时间开始时间
       *   createTimeStart?: string
       *   // [title] 创建时间结束时间
       *   createTimeEnd?: string
       *   // [title] 排序条件
       *   // [items] start
       *   // [title] 排序条件
       *   // [items] end
       *   sort?: string[]
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [title] 分页记录前端封装
       *   // 分页记录前端封装
       *   data?: {
       *     // [items] start
       *     // [title] History前端封装
       *     // 历史操作表前端封装
       *     // [items] end
       *     record?: Array<{
       *       // [title] 乐观锁
       *       version?: number
       *       // [title] ID
       *       id?: number
       *       // [title] 创建人
       *       creatorId?: number
       *       // [title] 创建时间
       *       createTime?: string
       *       // [title] 更新人
       *       updaterId?: number
       *       // [title] 更新时间
       *       updateTime?: string
       *       // [title] 内容
       *       content?: string
       *       // [title] MD5
       *       md5?: string
       *       // [title] 操作数据类型;1地区; 2图标; 3物品; 4点位; 5标签
       *       type?: number
       *       // [title] IPv4
       *       ipv4?: string
       *       // [title] 修改类型
       *       editType?: '0' | '1' | '2' | '3' | '10'
       *       tid?: number
       *     }>
       *     total?: number
       *     size?: number
       *   }
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      searchHistory<
        Config extends Alova2MethodConfig<RPageListVoHistoryVo> & {
          data: HistorySearchVo;
        }
      >(
        config: Config
      ): Alova2Method<RPageListVoHistoryVo, 'history.searchHistory', Config>;
    };
    app: {
      /**
       * ---
       *
       * [POST] 触发应用更新
       *
       * **path:** /api/app/trigger/update
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      triggerAppUpdate<Config extends Alova2MethodConfig<RBoolean>>(
        config?: Config
      ): Alova2Method<RBoolean, 'app.triggerAppUpdate', Config>;
    };
    role: {
      /**
       * ---
       *
       * [GET] 返回可用角色列表
       *
       * **path:** /system/role/list
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [items] start
       *   // [title] 角色Vo
       *   // 角色Vo
       *   // [items] end
       *   data?: Array<{
       *     // [title] 角色ID
       *     id?: number
       *     // [title] 角色名
       *     name?: string
       *     // [title] 角色代码（英文大写）
       *     code?: string
       *     // [title] 角色层级（越大级别越高）
       *     sort?: number
       *   }>
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      listRole<Config extends Alova2MethodConfig<RListSysRoleVo>>(
        config?: Config
      ): Alova2Method<RListSysRoleVo, 'role.listRole', Config>;
    };
    tag_doc: {
      /**
       * ---
       *
       * [GET] 获取所有标签信息的压缩
       *
       * **path:** /api/tag_doc/all_bin
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = string[]
       * ```
       */
      listAllTagBinary<Config extends Alova2MethodConfig<string[]>>(
        config?: Config
      ): Alova2Method<string[], 'tag_doc.listAllTagBinary', Config>;
      /**
       * ---
       *
       * [GET] 返回所有标签信息的md5
       *
       * **path:** /api/tag_doc/all_bin_md5
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [title] 归档类MD5前端封装
       *   // 归档类MD5前端封装
       *   data?: {
       *     // [title] md5
       *     md5?: string
       *     // [title] 时间戳
       *     time?: number
       *   }
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      listAllTagBinaryMd5<Config extends Alova2MethodConfig<RBinaryMD5Vo>>(
        config?: Config
      ): Alova2Method<RBinaryMD5Vo, 'tag_doc.listAllTagBinaryMd5', Config>;
    };
    marker_link_doc: {
      /**
       * ---
       *
       * [GET] 返回所有点位关联列表
       *
       * **path:** /api/marker_link_doc/all_list_bin
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = string[]
       * ```
       */
      listAllMarkerLinkageBinary<Config extends Alova2MethodConfig<string[]>>(
        config?: Config
      ): Alova2Method<string[], 'marker_link_doc.listAllMarkerLinkageBinary', Config>;
      /**
       * ---
       *
       * [GET] 返回所有点位关联列表的md5
       *
       * **path:** /api/marker_link_doc/all_list_bin_md5
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [title] 归档类MD5前端封装
       *   // 归档类MD5前端封装
       *   data?: {
       *     // [title] md5
       *     md5?: string
       *     // [title] 时间戳
       *     time?: number
       *   }
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      listAllMarkerLinkageBinaryMD5<Config extends Alova2MethodConfig<RBinaryMD5Vo>>(
        config?: Config
      ): Alova2Method<RBinaryMD5Vo, 'marker_link_doc.listAllMarkerLinkageBinaryMD5', Config>;
      /**
       * ---
       *
       * [GET] 返回所有点位关联有向图数据
       *
       * **path:** /api/marker_link_doc/all_graph_bin
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = string[]
       * ```
       */
      graphAllMarkerLinkageBinary<Config extends Alova2MethodConfig<string[]>>(
        config?: Config
      ): Alova2Method<string[], 'marker_link_doc.graphAllMarkerLinkageBinary', Config>;
      /**
       * ---
       *
       * [GET] 返回所有点位关联有向图数据的md5
       *
       * **path:** /api/marker_link_doc/all_graph_bin_md5
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [title] 归档类MD5前端封装
       *   // 归档类MD5前端封装
       *   data?: {
       *     // [title] md5
       *     md5?: string
       *     // [title] 时间戳
       *     time?: number
       *   }
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      graphAllMarkerLinkageBinaryMD5<Config extends Alova2MethodConfig<RBinaryMD5Vo>>(
        config?: Config
      ): Alova2Method<RBinaryMD5Vo, 'marker_link_doc.graphAllMarkerLinkageBinaryMD5', Config>;
    };
    marker_doc: {
      /**
       * ---
       *
       * [GET] 返回点位分页的md5数组
       *
       * **path:** /api/marker_doc/list_page_bin_md5
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [items] start
       *   // [title] 归档类MD5前端封装
       *   // 归档类MD5前端封装
       *   // [items] end
       *   data?: Array<{
       *     // [title] md5
       *     md5?: string
       *     // [title] 时间戳
       *     time?: number
       *   }>
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      listMarkerBinaryMD5<Config extends Alova2MethodConfig<RListBinaryMD5Vo>>(
        config?: Config
      ): Alova2Method<RListBinaryMD5Vo, 'marker_doc.listMarkerBinaryMD5', Config>;
      /**
       * ---
       *
       * [GET] 返回点位分页
       *
       * **path:** /api/marker_doc/list_page_bin/{md5}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   md5: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = string[]
       * ```
       */
      listPageMarkerByBinary<
        Config extends Alova2MethodConfig<string[]> & {
          pathParams: {
            md5: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'marker_doc.listPageMarkerByBinary', Config>;
    };
    item_doc: {
      /**
       * ---
       *
       * [GET] 返回物品分页的md5数组
       *
       * **path:** /api/item_doc/list_page_bin_md5
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   // [items] start
       *   // [title] 归档类MD5前端封装
       *   // 归档类MD5前端封装
       *   // [items] end
       *   data?: Array<{
       *     // [title] md5
       *     md5?: string
       *     // [title] 时间戳
       *     time?: number
       *   }>
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      listItemBinaryMD5<Config extends Alova2MethodConfig<RListBinaryMD5Vo>>(
        config?: Config
      ): Alova2Method<RListBinaryMD5Vo, 'item_doc.listItemBinaryMD5', Config>;
      /**
       * ---
       *
       * [GET] 返回物品分页
       *
       * **path:** /api/item_doc/list_page_bin/{md5}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   md5: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = string[]
       * ```
       */
      listPageItemByBinary<
        Config extends Alova2MethodConfig<string[]> & {
          pathParams: {
            md5: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'item_doc.listPageItemByBinary', Config>;
    };
    jwkController: {
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /.well-known/jwks.json
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = Record<string, object>
       * ```
       */
      getJwk<Config extends Alova2MethodConfig<Record<string, object>>>(
        config?: Config
      ): Alova2Method<Record<string, object>, 'jwkController.getJwk', Config>;
    };
    cache: {
      /**
       * ---
       *
       * [DELETE] 删除公告缓存
       *
       * **path:** /api/cache/notice
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      cleanNoticeCache<Config extends Alova2MethodConfig<RBoolean>>(
        config?: Config
      ): Alova2Method<RBoolean, 'cache.cleanNoticeCache', Config>;
      /**
       * ---
       *
       * [DELETE] 删除全部点位缓存
       *
       * **path:** /api/cache/marker
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      cleanMarkerCache<Config extends Alova2MethodConfig<RBoolean>>(
        config?: Config
      ): Alova2Method<RBoolean, 'cache.cleanMarkerCache', Config>;
      /**
       * ---
       *
       * [DELETE] 删除全部点位关联缓存
       *
       * **path:** /api/cache/marker_link
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      cleanMarkerLinkageCache<Config extends Alova2MethodConfig<RBoolean>>(
        config?: Config
      ): Alova2Method<RBoolean, 'cache.cleanMarkerLinkageCache', Config>;
      /**
       * ---
       *
       * [DELETE] 删除全部物品缓存
       *
       * **path:** /api/cache/item
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      cleanItemCache<Config extends Alova2MethodConfig<RBoolean>>(
        config?: Config
      ): Alova2Method<RBoolean, 'cache.cleanItemCache', Config>;
      /**
       * ---
       *
       * [DELETE] 删除标签缓存
       *
       * **path:** /api/cache/iconTag
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = string[]
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      cleanIconTagCache<
        Config extends Alova2MethodConfig<RBoolean> & {
          data: string[];
        }
      >(
        config: Config
      ): Alova2Method<RBoolean, 'cache.cleanIconTagCache', Config>;
      /**
       * ---
       *
       * [DELETE] 删除全部公用物品缓存
       *
       * **path:** /api/cache/commonItem
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      cleanCommonItemCache<Config extends Alova2MethodConfig<RBoolean>>(
        config?: Config
      ): Alova2Method<RBoolean, 'cache.cleanCommonItemCache', Config>;
      /**
       * ---
       *
       * [DELETE] 删除地区缓存
       *
       * **path:** /api/cache/area
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   error?: boolean
       *   errorStatus?: number
       *   errorData?: object
       *   message?: string
       *   data?: boolean
       *   users?: Record<
       *     string,
       *     {
       *       // [title] 用户名
       *       username?: string
       *       // [title] 昵称
       *       nickname?: string
       *       // [title] QQ
       *       qq?: string
       *       // [title] 手机号
       *       phone?: string
       *       // [title] 头像链接
       *       logo?: string
       *       // [title] 备注
       *       remark?: string
       *     }
       *   >
       *   time?: string
       * }
       * ```
       */
      cleanAreaCache<Config extends Alova2MethodConfig<RBoolean>>(
        config?: Config
      ): Alova2Method<RBoolean, 'cache.cleanAreaCache', Config>;
    };
  }

  var Apis: Apis;
}
